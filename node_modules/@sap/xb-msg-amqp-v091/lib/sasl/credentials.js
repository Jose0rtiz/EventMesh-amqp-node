'use strict';

const { EC, ErrMsg } = require('../errors');
const AMQP = require('../serialize/constants');

/**
 * Simple Authentication and Security Layer (SASL)
 * https://tools.ietf.org/html/rfc4422
 *
 * The PLAIN Simple Authentication and Security Layer (SASL) Mechanism
 * http://tools.ietf.org/html/rfc4616
 * (user name and password)
 */

/**
 * @private
 */
class Credentials {

    /**
     *
     */
    constructor(options) {

        /**
         * @type {!Object}
         * @private
         */
        this._options = options;

    }

    /**
     * @param {string} available
     * @return {string}
     */
    selectMechanism(available) {
        const requested = this._options.sasl.mechanism;
        if (available.split(' ').find((mechanism) => { return mechanism === requested; })) {
            return requested;
        } else {
            throw ErrMsg(EC.APP_ARGS_SASL_MECHANISM_NOT_SUPPORTED, requested);
        }
    }

    /**
     * @param {string} mechanism
     * @return {!Buffer}
     */
    provideResponse(mechanism) {
        const sasl = this._options.sasl;
        switch(mechanism) {
            case AMQP.SASL.MECHANISM.PLAIN:
                const ulen = typeof sasl.user === 'string' ? Buffer.byteLength(sasl.user) : 0;
                const plen = typeof sasl.password === 'string' ? Buffer.byteLength(sasl.password) : 0;

                const chunk = Buffer.alloc(1 + ulen + 1 + plen);
                let offset = 0;

                chunk.writeUInt8(0, offset);
                offset += 1;

                chunk.write(sasl.user, offset, ulen, 'utf8');
                offset += ulen;

                chunk.writeUInt8(0, offset);
                offset += 1;

                chunk.write(sasl.password, offset, plen, 'utf8');

                return chunk;
            default:
                throw ErrMsg(EC.APP_ARGS_SASL_MECHANISM_UNKNOWN, mechanism);
        }
    }

    /**
     * @param {!Buffer} challenge
     * @returns {!Buffer}
     */
    answerChallenge(challenge) {
        return Buffer.alloc(0);
    }

}

module.exports.Credentials = Credentials;

