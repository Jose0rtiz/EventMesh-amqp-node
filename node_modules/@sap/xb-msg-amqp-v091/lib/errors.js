'use strict';

const util = require('util');
const constants = require('./serialize/constants');
const component = constants.RUNTIME.LIBRARY + ' ' + constants.RUNTIME.VERSION;

const EC = Object.freeze({

    SERIALIZE_DECIMAL_MISMATCH                   : '[001] serialization, into decimal not possible for %s',
    SERIALIZE_TYPE_UNDEFINED                     : '[002] serialization, type undefined on value assignment',
    SERIALIZE_TYPE_MISMATCH                      : '[003] serialization, type mismatch on value assignment',
    SERIALIZE_TYPE_UNSUPPORTED                   : '[004] serialization, type unsupported for value assignment',
    SERIALIZE_INVALID_UINT64                     : '[005] serialization, UINT64 value invalid',
    SERIALIZE_INVALID_TIMESTAMP                  : '[006] serialization, TIMESTAMP value invalid',
    SERIALIZE_INVALID_INT64                      : '[007] serialization, INT64 value invalid',
    SERIALIZE_EXT_FIELD_TYPE_UNSUPPORTED         : '[008] serialization, external field type %s unsupported',
    SERIALIZE_INT_FIELD_TYPE_UNSUPPORTED         : '[009] serialization, internal field type %s unsupported',

    FRAME_HEADER_CLASS_MISMATCH                  : '[101] frame error, header class mismatch, expected %s but found %s',
    FRAME_EXCEEDS_SIZE                           : '[102] frame error, size of %s bytes exceeds max frame size of %s bytes',
    FRAME_METHOD_UNEXPECTED                      : '[103] frame error, unexpected method frame, waiting for header and bodies',
    FRAME_HEADER_UNEXPECTED_METHOD               : '[104] frame error, unexpected header frame, no corresponding method frame',
    FRAME_HEADER_UNEXPECTED_HEADER               : '[105] frame error, unexpected header frame, header frame already received',
    FRAME_BODY_UNEXPECTED_METHOD                 : '[106] frame error, unexpected body frame, no corresponding method frame',
    FRAME_BODY_UNEXPECTED_HEADER                 : '[107] frame error, unexpected body frame, no corresponding header frame',
    FRAME_TYPE_INVALID                           : '[108] frame error, invalid type',
    FRAME_END_NOT_FOUND                          : '[109] frame error, end code not found',
    FRAME_BYTES                                  : '[110] frame error, chunk reader needs more bytes to continue',
    FRAME_EXCEEDS_BLOCKS_SIZE                    : '[111] frame error, block content exceeds declared block size by %s bytes',
    FRAME_SIZE_MISMATCH                          : '[112] frame error, size mismatch, expected %s, but reading %s bytes',
    FRAME_WRITER_BLOCKS_NOT_CLOSED               : '[121] frame writer, %s blocks not closed, but frame end reached',
    FRAME_WRITER_BLOCK_END_NOT_EXPECTED          : '[122] frame writer, block end signaled, but no block open (anymore)',

    METHOD_ID_INVALID                            : '[200] method id, %s unknown',

    CONNECTION_CLOSED_PENDING_DISC               : '[301] connection closed, pending request discarded',
    CONNECTION_ERROR_AT_METHOD                   : '[302] connection error, at %s[%s],%s',
    CONNECTION_ERROR                             : '[303] connection error, [%s],%s',

    CHANNEL_OPENING                              : '[351] channel state on open, already opening',
    CHANNEL_OPENED                               : '[352] channel state on open, already opened',
    CHANNEL_CLOSING                              : '[353] channel state on open, still closing',
    CHANNEL_CLOSED_CLOSING                       : '[354] channel state on close, already closing',
    CHANNEL_CLOSED                               : '[355] channel state on close, already closed',
    CHANNEL_ERROR_AT_METHOD                      : '[356] channel error at %s[%s],%s',
    CHANNEL_ERROR                                : '[357] channel error [%s],%s',

    CLIENT_MISS_DEST                             : '[401] connection error, missing connection data, provide client options either for tls, net, wss or ws',
    CLIENT_STATE_ERROR                           : '[402] client state error on %s, already in state "%s"',
    CLIENT_CONNECT_RETRY                         : '[403] retry connect using alternative destination %d',
    CLIENT_CONNECT_REFUSED                       : '[404] connect failed, service not available (ECONNREFUSED)',
    CLIENT_CONNECT_TIMEOUT                       : '[405] connect failed, no response received (ETIMEDOUT)',
    CLIENT_CONNECT_FAILURE                       : '[406] connect failed, connection closed unexpectedly',

    CONTROLLER_SENDING                           : '[550] controller, sending not possible, wait for client connected',
    CONTROLLER_REGISTRATION_DUPLICATE            : '[551] controller, duplicate registration rejected for "%s"',
    CONTROLLER_REGISTRATION_NOT_FOUND            : '[552] controller, registration entry not found for "%s"',
    CONTROLLER_REGISTRATION_NOT_FOUND_KEY        : '[553] controller, registration entry not found for "%s" and objectKey "%s"',
    CONTROLLER_METHOD_UNEXPECTED                 : '[554] controller, unexpected method, no request found for "%s"',
    CONTROLLER_METHOD_UNEXPECTED_KEY             : '[555] controller, unexpected method, no request found for "%s" and objectKey "%s"',
    CONTROLLER_PUBLISH_NOT_CONFIRMED             : '[556] controller, message not confirmed by broker, received BasicNack instead',
    CONTROLLER_CONFIRM_ALREADY_STARTED           : '[557] controller, confirm mode already requested for channel %s',
    CONTROLLER_CONFIRM_CANCEL_ON_CLOSE           : '[558] controller, message not confirmed by broker, connection closed before',

    APP_STREAM_RECEIVE_UNKNOWN_ERROR             : '[601] application error, receive via unified stream failed with unknown error',

    APP_ARGS_INVALID_TYPE_FOR_CLIENT_OPTIONS     : '[701] application error, invalid arguments for "%s", expected type "%s"',
    APP_ARGS_INVALID_DATA_FOR_CLIENT_OPTIONS     : '[702] application error, invalid arguments for "%s"',
    APP_ARGS_INVALID_DATA_FOR_CLIENT_OPTIONS_EXP : '[703] application error, invalid arguments for "%s", expected "%s"',
    APP_ARGS_INVALID_URI_SCHEMA                  : '[704] application error: invalid arguments for uri schema "%s"',
    APP_ARGS_INVALID_ISTREAM_MAP                 : '[705] application error, invalid consumer stream options',
    APP_ARGS_INVALID_ISTREAM_OPTIONS             : '[706] application error, invalid consumer stream options for "%s"',
    APP_ARGS_INVALID_ISTREAM_ID                  : '[707] application error, invalid consumer stream "%s"',
    APP_ARGS_INVALID_OSTREAM_MAP                 : '[708] application error, invalid producer stream options',
    APP_ARGS_INVALID_OSTREAM_OPTIONS             : '[709] application error, invalid producer stream options for "%s"',
    APP_ARGS_INVALID_OSTREAM_ID                  : '[710] application error, invalid producer stream "%s"',
    APP_ARGS_INVALID_PAYLOAD_TO_PUBLISH          : '[711] application error, invalid payload type to publish, expects null, Buffer or Payload',
    APP_ARGS_INVALID_ROUTING_KEY_TYPE_TO_PUBLISH : '[712] application error, invalid routing key type "%s" to publish, "string" expected',
    APP_ARGS_INVALID_CHANNEL_ID                  : '[713] application error, invalid channel id "%s"',
    APP_ARGS_INVALID_EXCHANGE                    : '[714] application error, invalid argument for exchange name',
    APP_ARGS_INVALID_QUEUE                       : '[715] application error, invalid argument for queue name',

    APP_ARGS_SASL_MECHANISM_NOT_SUPPORTED        : '[901] SASL mechanism, %s not supported by broker',
    APP_ARGS_SASL_MECHANISM_UNKNOWN              : '[902] SASL mechanism, %s unknown',

});

/**
 * @param {string} code
 * @param {...*} params
 * @returns {!Error}
 * @private
 */
function ErrMsg(code, ...params) {
    return new Error(util.format(component + ' ' + code, ...params));
}

/**
 * @param {!Error} error
 * @param {NotifyOfFailed=} callback
 * @param {EventEmitter=} emitter
 * @private
 */
function Raise(error, callback, emitter) {
    if (typeof callback === 'function')
        callback(error);
    else if (emitter)
        emitter.emit('error', error);
}

module.exports = {
    EC : EC,
    ErrMsg : ErrMsg,
    Raise : Raise
};

