
'use strict';

const { Method } = require('../serialize/types');

const constants = require('../serialize/constants');
const SELECT = constants.METHOD.TRANSACTION.SELECT;
const SELECT_OK = constants.METHOD.TRANSACTION.SELECT_OK;
const COMMIT = constants.METHOD.TRANSACTION.COMMIT;
const COMMIT_OK = constants.METHOD.TRANSACTION.COMMIT_OK;
const ROLLBACK = constants.METHOD.TRANSACTION.ROLLBACK;
const ROLLBACK_OK = constants.METHOD.TRANSACTION.ROLLBACK_OK;

/**
 * @struct
 * @private
 */
class TxSelect extends Method {

    constructor() {
        super(SELECT);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class TxSelectOk extends Method {

    constructor() {
        super(SELECT_OK, SELECT_OK);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class TxCommit extends Method {

    constructor() {
        super(COMMIT);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class TxCommitOk extends Method {

    constructor() {
        super(COMMIT_OK, COMMIT);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class TxRollback extends Method {

    constructor() {
        super(ROLLBACK);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class TxRollbackOk extends Method {

    constructor() {
        super(ROLLBACK_OK, ROLLBACK);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

module.exports = {
    Select : TxSelect,
    SelectOk : TxSelectOk,
    Commit : TxCommit,
    CommitOk : TxCommitOk,
    Rollback : TxRollback,
    RollbackOk : TxRollbackOk
};

