'use strict';

const { Method } = require('../serialize/types');
const constants = require('../serialize/constants');
const OPEN = constants.METHOD.CHANNEL.OPEN;
const OPEN_OK = constants.METHOD.CHANNEL.OPEN_OK;
const FLOW = constants.METHOD.CHANNEL.FLOW;
const FLOW_OK = constants.METHOD.CHANNEL.FLOW_OK;
const CLOSE = constants.METHOD.CHANNEL.CLOSE;
const CLOSE_OK = constants.METHOD.CHANNEL.CLOSE_OK;

/**
 * @struct
 * @private
 */
class ChannelOpen extends Method {

    /**
     *
     */
    constructor() {
        super(OPEN);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        let reserved = decoder.readUInt8();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt8(reserved);
    }

}

/**
 * @struct
 * @private
 */
class ChannelOpenOk extends Method {

    /**
     *
     */
    constructor() {
        super(OPEN_OK, OPEN);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        let reserved = decoder.readUInt32();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt32(reserved);
    }

}

/**
 * @struct
 * @private
 */
class ChannelFlow extends Method {

    /**
     * @param {boolean=} active
     */
    constructor(active = false) {
        super(FLOW);

        /**
         * @type {?boolean}
         */
        this.active = active;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        const bitSet = decoder.readBitSet8Inverse(1);
        this.active = bitSet[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeBitSet8Inverse(this.active);
    }

}

/**
 * @struct
 * @private
 */
class ChannelFlowOk extends Method {

    /**
     *
     */
    constructor() {
        super(FLOW_OK, FLOW);

        /**
         * @type {boolean}
         */
        this.active = false;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        const bitSet = decoder.readBitSet8Inverse(1);
        this.active = bitSet[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeBitSet8Inverse(this.active);
    }

}

/**
 * @struct
 * @private
 */
class ChannelClose extends Method {

    /**
     *
     */
    constructor() {
        super(CLOSE);

        /**
         * @type {?number}
         */
        this.replyCode = null;

        /**
         * @type {?string}
         */
        this.replyText = null;

        /**
         * @type {?number}
         */
        this.failed = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.replyCode = decoder.readUInt16();
        this.replyText = decoder.readShortString();
        this.failed = decoder.readUInt32();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.replyCode);
        encoder.writeShortString(this.replyText);
        encoder.writeUInt32(this.failed);
    }

}

/**
 * @struct
 * @private
 */
class ChannelCloseOk extends Method {

    constructor() {
        super(CLOSE_OK, CLOSE);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

module.exports = {
    Open : ChannelOpen,
    OpenOk : ChannelOpenOk,
    Flow : ChannelFlow,
    FlowOk : ChannelFlowOk,
    Close : ChannelClose,
    CloseOk : ChannelCloseOk
};

