/*jshint sub:true*/
'use strict';

const { Method, MethodContent, Payload, Properties, FieldTable } = require('../serialize/types');

const constants = require('../serialize/constants');
const BASIC = constants.CLASS.BASIC;
const BASIC_QOS = constants.METHOD.BASIC.QOS;
const BASIC_QOS_OK = constants.METHOD.BASIC.QOS_OK;
const BASIC_CONSUME = constants.METHOD.BASIC.CONSUME;
const BASIC_CONSUME_OK = constants.METHOD.BASIC.CONSUME_OK;
const BASIC_CANCEL = constants.METHOD.BASIC.CANCEL;
const BASIC_CANCEL_OK = constants.METHOD.BASIC.CANCEL_OK;
const BASIC_PUBLISH = constants.METHOD.BASIC.PUBLISH;
const BASIC_RETURN = constants.METHOD.BASIC.RETURN;
const BASIC_DELIVER = constants.METHOD.BASIC.DELIVER;
const BASIC_GET = constants.METHOD.BASIC.GET;
const BASIC_GET_OK = constants.METHOD.BASIC.GET_OK;
const BASIC_GET_EMPTY = constants.METHOD.BASIC.GET_EMPTY;
const BASIC_ACK = constants.METHOD.BASIC.ACK;
const BASIC_REJECT = constants.METHOD.BASIC.REJECT;
const BASIC_RECOVER_ASYNC = constants.METHOD.BASIC.RECOVER_ASYNC;
const BASIC_RECOVER = constants.METHOD.BASIC.RECOVER;
const BASIC_RECOVER_OK = constants.METHOD.BASIC.RECOVER_OK;
const BASIC_NACK = constants.METHOD.BASIC.NACK;

const FLAG_CONTENT_TYPE = constants.PROPERTY.BASIC.FLAG.CONTENT_TYPE;
const FLAG_CONTENT_ENCODING = constants.PROPERTY.BASIC.FLAG.CONTENT_ENCODING;
const FLAG_BASIC_HEADERS = constants.PROPERTY.BASIC.FLAG.BASIC_HEADERS;
const FLAG_DELIVERY_MODE = constants.PROPERTY.BASIC.FLAG.DELIVERY_MODE;
const FLAG_PRIORITY = constants.PROPERTY.BASIC.FLAG.PRIORITY;
const FLAG_CORRELATION_ID = constants.PROPERTY.BASIC.FLAG.CORRELATION_ID;
const FLAG_REPLY_TO = constants.PROPERTY.BASIC.FLAG.REPLY_TO;
const FLAG_EXPIRATION = constants.PROPERTY.BASIC.FLAG.EXPIRATION;
const FLAG_MESSAGE_ID = constants.PROPERTY.BASIC.FLAG.MESSAGE_ID;
const FLAG_TIMESTAMP = constants.PROPERTY.BASIC.FLAG.TIMESTAMP;
const FLAG_TYPE = constants.PROPERTY.BASIC.FLAG.TYPE;
const FLAG_USER_ID = constants.PROPERTY.BASIC.FLAG.USER_ID;
const FLAG_APP_ID = constants.PROPERTY.BASIC.FLAG.APP_ID;

const PERSISTENT = constants.PROPERTY.BASIC.DELIVERY_MODE.PERSISTENT;

const EMPTY_FIELD_TABLE = new FieldTable();

/**
 * These properties can be added to methods that contain a payload
 * @typedef {Object} PayloadProperties
 * @property {string} contentType - MIME content type.
 * @property {string} contentEncoding - MIME content encoding.
 * @property {FieldTable} basicHeaders - Message header field table.
 * @property {number} persistent - Indicates whether or not to use persistent mode.
 * @property {number} priority - Message priority (0 to 9).
 * @property {string} correlationID - Application correlation identifier.
 * @property {string} replyTo - Address to reply to.
 * @property {string} expiration - Message expiration specification.
 * @property {string} messageID - Application message identifier.
 * @property {number} timestamp - Message timestamp.
 * @property {string} type - Message type name.
 * @property {string} userID - Creating user identifier.
 * @property {string} appID - Creating application identifier.
 */

/**
 * http://www.rabbitmq.com/amqp-0-9-1-reference.html#class.basic
 *
 * @struct
 * @private
 */
class BasicProperties extends Properties {

    /**
     *
     */
    constructor() {
        super();

        /**
         * @type {Object<string, (number|string|Object|FieldTable)>}
         */
        this.data = null;
    }

    /**
     * @return {number}
     * @override
     */
    classID() {
        return BASIC;
    }

    /**
     * @param {!Decoder} decoder
     * @param {!Payload} payload
     * @override
     */
    deserialize(decoder, payload) {
        const flags = decoder.readBitSet16(15);
        const data = {};

        if(flags[FLAG_CONTENT_TYPE])
            payload.type = data['contentType'] = decoder.readShortString();
        if(flags[FLAG_CONTENT_ENCODING])
            payload.encoding = data['contentEncoding'] = decoder.readShortString();
        if(flags[FLAG_BASIC_HEADERS])
            (data['basicHeaders'] = new FieldTable()).deserialize(decoder);
        if(flags[FLAG_DELIVERY_MODE])
            data['persistent'] = (decoder.readUInt8() === PERSISTENT);
        if(flags[FLAG_PRIORITY])
            data['priority'] = decoder.readUInt8();
        if(flags[FLAG_CORRELATION_ID])
            data['correlationID'] = decoder.readShortString();
        if(flags[FLAG_REPLY_TO])
            data['replyTo'] = decoder.readShortString();
        if(flags[FLAG_EXPIRATION])
            data['expiration'] = decoder.readShortString();
        if(flags[FLAG_MESSAGE_ID])
            data['messageID'] = decoder.readShortString();
        if(flags[FLAG_TIMESTAMP])
            data['timestamp'] = decoder.readUInt64();
        if(flags[FLAG_TYPE])
            data['type'] = decoder.readShortString();
        if(flags[FLAG_USER_ID])
            data['userID'] = decoder.readShortString();
        if(flags[FLAG_APP_ID])
            data['appID'] = decoder.readShortString();

        this.data = Object.keys(data).length ? data : null;
    }

    /**
     * @param {!Encoder} encoder
     * @param {!Payload} payload
     * @override
     */
    serialize(encoder, payload) {
        if(this.data) {
            encoder.writeBitSet16(
                this.data['contentType'] || payload.type,
                this.data['contentEncoding'] || payload.encoding,
                this.data['basicHeaders'],
                this.data['persistent'],
                this.data['priority'],
                this.data['correlationID'],
                this.data['replyTo'],
                this.data['expiration'],
                this.data['messageID'],
                this.data['timestamp'],
                this.data['type'],
                this.data['userId'],
                this.data['appId']
            );

            if (payload.type)
                encoder.writeShortString(payload.type);
            else if(this.data['contentType'])
                encoder.writeShortString(this.data['contentType']);
            if (payload.encoding)
                encoder.writeShortString(payload.encoding);
            else if(this.data['contentEncoding'])
                encoder.writeShortString(this.data['contentEncoding']);
            if(this.data['basicHeaders'])
                this.data['basicHeaders'].serialize(encoder);
            if(this.data['persistent'])
                encoder.writeUInt8(PERSISTENT);
            if(this.data['priority'])
                encoder.writeUInt8(this.data['priority']);
            if(this.data['correlationID'])
                encoder.writeShortString(this.data['correlationID']);
            if(this.data['replyTo'])
                encoder.writeShortString(this.data['replyTo']);
            if(this.data['expiration'])
                encoder.writeShortString(this.data['expiration']);
            if(this.data['messageID'])
                encoder.writeShortString(this.data['messageID']);
            if(this.data['timestamp'])
                encoder.writeUInt64(this.data['timestamp']);
            if(this.data['type'])
                encoder.writeShortString(this.data['type']);
            if(this.data['userID'])
                encoder.writeShortString(this.data['userID']);
            if(this.data['appID'])
                encoder.writeShortString(this.data['appID']);
        } else {
            encoder.writeBitSet16(0);
        }
    }
}

/**
 * @private
 * @abstract
 */
class BasicContentMethod extends MethodContent {

    /**
     * @param {!number} classMethodID
     * @param {number=} requestClassMethodID
     */
    constructor(classMethodID, requestClassMethodID) {
        super(classMethodID, requestClassMethodID);

        /**
         * @type {!BasicProperties}
         */
        this.properties = new BasicProperties();

        /**
         * @type {!Payload}
         */
        this.payload = new Payload();
    }

}

/**
 * @struct
 * @private
 */
class BasicQos extends Method {

    constructor() {
        super(BASIC_QOS);

        /**
         * @type {number}
         */
        this.prefetchSize = 0;

        /**
         * @type {number}
         */
        this.prefetchCount = 0;

        /**
         * @type {boolean}
         */
        this.global = false;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.prefetchSize = decoder.readUInt32();
        this.prefetchCount = decoder.readUInt16();
        this.global = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt32(this.prefetchSize);
        encoder.writeUInt16(this.prefetchCount);
        encoder.writeBitSet8Inverse(this.global);
    }

}

/**
 * @struct
 * @private
 */
class BasicQosOk extends Method {

    constructor() {
        super(BASIC_QOS_OK, BASIC_QOS);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class BasicConsume extends Method {

    constructor() {
        super(BASIC_CONSUME);

        /**
         * @type {string}
         */
        this.queue = null;

        /**
         * @type {string}
         */
        this.consumerTag = null;

        /**
         * @type {boolean}
         */
        this.noLocal = false;

        /**
         * @type {boolean}
         */
        this.noAck = false;

        /**
         * @type {boolean}
         */
        this.exclusive = false;

        /**
         * @type {boolean}
         */
        this.noWait = false;

        /**
         * @type {?FieldTable}
         */
        this.args = null;
    }

    /**
     * @returns {?string}
     * @override
     */
    objectKey() {
        return this.consumerTag;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        const reserved = decoder.readUInt16();
        this.queue = decoder.readShortString();
        this.consumerTag = decoder.readShortString();
        const bitSet = decoder.readBitSet8Inverse(4);
        this.noLocal = bitSet[0];
        this.noAck = bitSet[1];
        this.exclusive = bitSet[2];
        this.noWait = bitSet[3];
        this.args = new FieldTable();
        this.args.deserialize(decoder);
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt16(reserved);
        encoder.writeShortString(this.queue);
        encoder.writeShortString(this.consumerTag);
        encoder.writeBitSet8Inverse(this.noLocal, this.noAck, this.exclusive, this.noWait);
        if(this.args) {
            this.args.serialize(encoder);
        } else {
            EMPTY_FIELD_TABLE.serialize(encoder);
        }
    }

}

/**
 * @struct
 * @private
 */
class BasicConsumeOk extends Method {

    constructor() {
        super(BASIC_CONSUME_OK, BASIC_CONSUME);

        /**
         * @type {?string}
         */
        this.consumerTag = null;
    }

    /**
     * @returns {?string}
     * @override
     */
    objectKey() {
        return this.consumerTag;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.consumerTag = decoder.readShortString();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeShortString(this.consumerTag);
    }

}

/**
 * @struct
 * @private
 */
class BasicCancel extends Method {

    constructor() {
        super(BASIC_CANCEL);

        /**
         * @type {?string}
         */
        this.consumerTag = null;

        /**
         * @type {boolean}
         */
        this.noWait = false;
    }

    /**
     * @returns {?string}
     * @override
     */
    objectKey() {
        return this.consumerTag;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.consumerTag = decoder.readShortString();
        this.noWait = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeShortString(this.consumerTag);
        encoder.writeBitSet8Inverse(this.noWait);
    }

}

/**
 * @struct
 * @private
 */
class BasicCancelOk extends Method {

    constructor() {
        super(BASIC_CANCEL_OK, BASIC_CANCEL);

        /**
         * @type {?string}
         */
        this.consumerTag = null;
    }

    /**
     * @returns {?string}
     * @override
     */
    objectKey() {
        return this.consumerTag;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.consumerTag = decoder.readShortString();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeShortString(this.consumerTag);
    }

}

/**
 * @struct
 * @private
 */
class BasicPublish extends BasicContentMethod {

    /**
     *
     */
    constructor() {
        super(BASIC_PUBLISH);

        /**
         * @type {?string}
         */
        this.exchange = null;

        /**
         * @type {?string}
         */
        this.routingKey = null;

        /**
         * @type {boolean}
         */
        this.mandatory = false;

        /**
         * @type {boolean}
         */
        this.immediate = false;

        /**
         * @type {?NotifyOfDone}
         */
        this.done = null;

        /**
         * @type {?NotifyOfFailed}
         */
        this.failed = null;

        /**
         * @type {Controller}
         */
        this.controller = null;

    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        const reserved = decoder.readUInt16();
        this.exchange = decoder.readShortString();
        this.routingKey = decoder.readShortString();
        const bitSet = decoder.readBitSet8Inverse(2);
        this.mandatory = bitSet[0];
        this.immediate = bitSet[1];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt16(reserved);
        encoder.writeShortString(this.exchange);
        encoder.writeShortString(this.routingKey);
        encoder.writeBitSet8Inverse(this.mandatory, this.immediate);
        if (this.controller) this.controller.onPublishSerialized(this);
    }

}

/**
 * @struct
 * @private
 */
class BasicReturn extends BasicContentMethod {

    constructor() {
        super(BASIC_RETURN);

        /**
         * @type {?number}
         */
        this.replyCode = null;

        /**
         * @type {?string}
         */
        this.replyText = null;

        /**
         * @type {?string}
         */
        this.exchange = null;

        /**
         * @type {?string}
         */
        this.routingKey = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.replyCode = decoder.readUInt16();
        this.replyText = decoder.readShortString();
        this.exchange = decoder.readShortString();
        this.routingKey = decoder.readShortString();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.replyCode);
        encoder.writeShortString(this.replyText);
        encoder.writeShortString(this.exchange);
        encoder.writeShortString(this.routingKey);
    }

}

/**
 * @struct
 * @private
 */
class BasicDeliver extends BasicContentMethod {

    constructor() {
        super(BASIC_DELIVER);

        /**
         * @type {?string}
         */
        this.consumerTag = null;

        /**
         * @type {?number}
         */
        this.deliveryTag = null;

        /**
         * @type {boolean}
         */
        this.redelivered = false;

        /**
         * @type {?string}
         */
        this.exchange = null;

        /**
         * @type {?string}
         */
        this.routingKey = null;
    }

    /**
     * @returns {?string}
     * @override
     */
    objectKey() {
        return this.consumerTag;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.consumerTag = decoder.readShortString();
        this.deliveryTag = decoder.readUInt64();
        this.redelivered = decoder.readBitSet8Inverse(1)[0];
        this.exchange = decoder.readShortString();
        this.routingKey = decoder.readShortString();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeShortString(this.consumerTag);
        encoder.writeUInt64(this.deliveryTag);
        encoder.writeBitSet8Inverse(this.redelivered);
        encoder.writeShortString(this.exchange);
        encoder.writeShortString(this.routingKey);
    }
}

/**
 * @struct
 * @private
 */
class BasicGet extends Method {

    constructor() {
        super(BASIC_GET);

        /**
         * @type {?string}
         */
        this.queue = null;

        /**
         * @type {boolean}
         */
        this.noAck = false;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        let reserved = decoder.readUInt16();
        this.queue = decoder.readShortString();
        this.noAck = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt16(reserved);
        encoder.writeShortString(this.queue);
        encoder.writeBitSet8Inverse(this.noAck);
    }

}

/**
 * @struct
 * @private
 */
class BasicGetOk extends BasicContentMethod {

    constructor() {
        super(BASIC_GET_OK, BASIC_GET);

        /**
         * @type {?number}
         */
        this.deliveryTag = null;

        /**
         * @type {boolean}
         */
        this.redelivered = false;

        /**
         * @type {?string}
         */
        this.exchange = null;

        /**
         * @type {?string}
         */
        this.routingKey = null;

        /**
         * @type {?number}
         */
        this.messageCount = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.deliveryTag = decoder.readUInt64();
        this.redelivered = decoder.readBitSet8Inverse(1)[0];
        this.exchange = decoder.readShortString();
        this.routingKey = decoder.readShortString();
        this.messageCount = decoder.readUInt8();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt64(this.deliveryTag);
        encoder.writeBitSet8Inverse(this.redelivered);
        encoder.writeShortString(this.exchange);
        encoder.writeShortString(this.routingKey);
        encoder.writeUInt8(this.messageCount);
    }

}

/**
 * @struct
 * @private
 */
class BasicGetEmpty extends Method {

    constructor() {
        super(BASIC_GET_EMPTY, BASIC_GET);

    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        let reserved = decoder.readUInt16();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt16(reserved);
    }

}

/**
 * @struct
 * @private
 */
class BasicAck extends Method {

    constructor() {
        super(BASIC_ACK);

        /**
         * @type {?number}
         */
        this.deliveryTag = null;

        /**
         * @type {boolean}
         */
        this.multiple = false;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.deliveryTag = decoder.readUInt64();
        this.multiple = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt64(this.deliveryTag);
        encoder.writeBitSet8Inverse(this.multiple);
    }

}

/**
 * @struct
 * @private
 */
class BasicReject extends Method {

    constructor() {
        super(BASIC_REJECT);

        /**
         * @type {?number}
         */
        this.deliveryTag = null;

        /**
         * @type {boolean}
         */
        this.requeue = false;
    }

    /**
     * @override
     * @param {!Decoder} decoder
     */
    deserialize(decoder) {
        this.deliveryTag = decoder.readUInt64();
        this.requeue = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @override
     * @param {!Encoder} encoder
     */
    serialize(encoder) {
        encoder.writeUInt64(this.deliveryTag);
        encoder.writeBitSet8Inverse(this.requeue);
    }
}

/**
 * @struct
 * @private
 */
class BasicRecoverAsync extends Method {

    constructor() {
        super(BASIC_RECOVER_ASYNC);

        /**
         * @type {boolean}
         */
        this.requeue = false;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.requeue = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeBitSet8Inverse(this.requeue);
    }

}

/**
 * @struct
 * @private
 */
class BasicRecover extends Method {

    constructor() {
        super(BASIC_RECOVER);

        /**
         * @type {boolean}
         */
        this.requeue = false;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.requeue = decoder.readBitSet8Inverse(1)[0];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeBitSet8Inverse(this.requeue);
    }
}

/**
 * @struct
 * @private
 */
class BasicRecoverOk extends Method {

    constructor() {
        super(BASIC_RECOVER_OK, BASIC_RECOVER);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

/**
 * @struct
 * @private
 */
class BasicNack extends Method {

    constructor() {
        super(BASIC_NACK);

        /**
         * @type {?number}
         */
        this.deliveryTag = null;

        /**
         * @type {boolean}
         */
        this.multiple = false;

        /**
         * @type {boolean}
         */
        this.requeue = false;

    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.deliveryTag = decoder.readUInt64();
        const bitSet = decoder.readBitSet8Inverse(2);
        this.multiple = bitSet[0];
        this.requeue = bitSet[1];
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt64(this.deliveryTag);
        encoder.writeBitSet8Inverse(this.multiple, this.requeue);
    }

}

module.exports = {
    Properties : BasicProperties,
    Qos : BasicQos,
    QosOk : BasicQosOk,
    Consume : BasicConsume,
    ConsumeOk : BasicConsumeOk,
    Cancel : BasicCancel,
    CancelOk : BasicCancelOk,
    Publish : BasicPublish,
    Return : BasicReturn,
    Deliver : BasicDeliver,
    Get : BasicGet,
    GetOk : BasicGetOk,
    GetEmpty : BasicGetEmpty,
    Ack : BasicAck,
    Reject : BasicReject,
    RecoverAsync : BasicRecoverAsync,
    Recover : BasicRecover,
    RecoverOk : BasicRecoverOk,
    Nack : BasicNack
};

