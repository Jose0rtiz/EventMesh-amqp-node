'use strict';

const { Method } = require('../serialize/types');
const { FieldTable } = require('../serialize/types');

const constants = require('../serialize/constants');
const START = constants.METHOD.CONNECTION.START;
const START_OK = constants.METHOD.CONNECTION.START_OK;
const SECURE = constants.METHOD.CONNECTION.SECURE;
const SECURE_OK = constants.METHOD.CONNECTION.SECURE_OK;
const TUNE = constants.METHOD.CONNECTION.TUNE;
const TUNE_OK = constants.METHOD.CONNECTION.TUNE_OK;
const OPEN = constants.METHOD.CONNECTION.OPEN;
const OPEN_OK = constants.METHOD.CONNECTION.OPEN_OK;
const CLOSE = constants.METHOD.CONNECTION.CLOSE;
const CLOSE_OK = constants.METHOD.CONNECTION.CLOSE_OK;


/**
 * @struct
 * @private
 */
class ConnectionStart extends Method {

    /**
     *
     */
    constructor() {
        super(START);

        /**
         * @type {?number}
         */
        this.versionMajor = null;

        /**
         * @type {?number}
         */
        this.versionMinor = null;

        /**
         * @type {?FieldTable}
         */
        this.serverProperties = new FieldTable();

        /**
         * @type {?string}
         */
        this.mechanisms = null;

        /**
         * @type {?string}
         */
        this.locales = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.versionMajor = decoder.readUInt8();
        this.versionMinor = decoder.readUInt8();
        this.serverProperties = new FieldTable();
        this.serverProperties.deserialize(decoder);
        this.mechanisms = decoder.readLongString();
        this.locales = decoder.readLongString();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt8(this.versionMajor);
        encoder.writeUInt8(this.versionMinor);
        this.serverProperties.serialize(encoder);
        encoder.writeLongString(this.mechanisms);
        encoder.writeLongString(this.locales);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionStartOk extends Method {

    /**
     *
     */
    constructor() {
        super(START_OK, START);

        /**
         * @type {?FieldTable}
         */
        this.clientProperties = new FieldTable();

        /**
         * @type {?string}
         */
        this.mechanism = null;

        /**
         * @type {?Buffer}
         */
        this.response = null;

        /**
         * @type {?string}
         */
        this.locale = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.clientProperties = new FieldTable();
        this.clientProperties.deserialize(decoder);
        this.mechanism = decoder.readShortString();
        this.response = decoder.readBytes();
        this.locale = decoder.readShortString();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        this.clientProperties.serialize(encoder);
        encoder.writeShortString(this.mechanism);
        encoder.writeBytes(this.response);
        encoder.writeShortString(this.locale);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionSecure extends Method {

    /**
     *
     */
    constructor() {
        super(SECURE);

        /**
         * @type {?Buffer}
         */
        this.challenge = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.challenge = decoder.readBytes();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeBytes(this.challenge);
    }
}

/**
 * @struct
 * @private
 */
class ConnectionSecureOk extends Method {

    /**
     *
     */
    constructor() {
        super(SECURE_OK, SECURE);

        /**
         * @type {?Buffer}
         */
        this.response = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.response = decoder.readBytes();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeBytes(this.response);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionTune extends Method {

    /**
     *
     */
    constructor() {
        super(TUNE);

        /**
         * @type {?number}
         */
        this.channelMax = null;

        /**
         * @type {?number}
         */
        this.frameMax = null;

        /**
         * @type {?number}
         */
        this.heartbeat = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.channelMax = decoder.readUInt16();
        this.frameMax = decoder.readUInt32();
        this.heartbeat = decoder.readUInt16();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.channelMax);
        encoder.writeUInt32(this.frameMax);
        encoder.writeUInt16(this.heartbeat);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionTuneOk extends Method {

    /**
     *
     */
    constructor() {
        super(TUNE_OK, TUNE);

        /**
         * @type {?number}
         */
        this.channelMax = null;

        /**
         * @type {?number}
         */
        this.frameMax = null;

        /**
         * @type {?number}
         */
        this.heartbeat = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.channelMax = decoder.readUInt16();
        this.frameMax = decoder.readUInt32();
        this.heartbeat = decoder.readUInt16();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.channelMax);
        encoder.writeUInt32(this.frameMax);
        encoder.writeUInt16(this.heartbeat);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionOpen extends Method {

    /**
     *
     */
    constructor() {
        super(OPEN);

        /**
         * @type {?string}
         */
        this.virtualHost = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.virtualHost = decoder.readShortString();
        // noinspection JSUnusedLocalSymbols
        let reserved = decoder.readUInt16();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeShortString(this.virtualHost);
        // noinspection JSUnusedLocalSymbols
        const reserved = 0;
        encoder.writeUInt16(reserved);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionOpenOk extends Method {

    /**
     *
     */
    constructor() {
        super(OPEN_OK, OPEN);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // noinspection JSUnusedLocalSymbols
        let reserved = decoder.readUInt8();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        const reserved = 0;
        encoder.writeUInt8(reserved);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionClose extends Method {

    /**
     *
     */
    constructor() {
        super(CLOSE);

        /**
         * @type {?number}
         */
        this.replyCode = null;

        /**
         * @type {?string}
         */
        this.replyText = null;

        /**
         * @type {?number}
         */
        this.failed = null;
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.replyCode = decoder.readUInt16();
        this.replyText = decoder.readShortString();
        this.failed = decoder.readUInt32();
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.replyCode);
        encoder.writeShortString(this.replyText);
        encoder.writeUInt32(this.failed);
    }

}

/**
 * @struct
 * @private
 */
class ConnectionCloseOk extends Method {

    /**
     *
     */
    constructor() {
        super(CLOSE_OK, CLOSE);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

}

module.exports = {
    Start: ConnectionStart,
    StartOk: ConnectionStartOk,
    Secure: ConnectionSecure,
    SecureOk: ConnectionSecureOk,
    Tune: ConnectionTune,
    TuneOk: ConnectionTuneOk,
    Open: ConnectionOpen,
    OpenOk: ConnectionOpenOk,
    Close: ConnectionClose,
    CloseOk: ConnectionCloseOk,
};

