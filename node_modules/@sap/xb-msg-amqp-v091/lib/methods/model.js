'use strict';

const { EC, ErrMsg } = require('../errors');
const { MethodFactory } = require('../serialize/types');

const Basic = require('./basic');
const Confirm = require('./confirm');
const Exchange = require('./exchange');
const Queue = require('./queue');
const Connection = require('./connection');
const Channel = require('./channel');
const Tx = require('./transaction');

const constants = require('../serialize/constants');
const registry = new Map([
    [constants.METHOD.BASIC.QOS               , Basic.Qos          ],
    [constants.METHOD.BASIC.QOS_OK            , Basic.QosOk        ],
    [constants.METHOD.BASIC.CONSUME           , Basic.Consume      ],
    [constants.METHOD.BASIC.CONSUME_OK        , Basic.ConsumeOk    ],
    [constants.METHOD.BASIC.CANCEL            , Basic.Cancel       ],
    [constants.METHOD.BASIC.CANCEL_OK         , Basic.CancelOk     ],
    [constants.METHOD.BASIC.PUBLISH           , Basic.Publish      ],
    [constants.METHOD.BASIC.RETURN            , Basic.Return       ],
    [constants.METHOD.BASIC.DELIVER           , Basic.Deliver      ],
    [constants.METHOD.BASIC.GET               , Basic.Get          ],
    [constants.METHOD.BASIC.GET_OK            , Basic.GetOk        ],
    [constants.METHOD.BASIC.GET_EMPTY         , Basic.GetEmpty     ],
    [constants.METHOD.BASIC.ACK               , Basic.Ack          ],
    [constants.METHOD.BASIC.REJECT            , Basic.Reject       ],
    [constants.METHOD.BASIC.RECOVER_ASYNC     , Basic.RecoverAsync ],
    [constants.METHOD.BASIC.RECOVER           , Basic.Recover      ],
    [constants.METHOD.BASIC.RECOVER_OK        , Basic.RecoverOk    ],
    [constants.METHOD.BASIC.NACK              , Basic.Nack         ],
    [constants.METHOD.QUEUE.DECLARE           , Queue.Declare      ],
    [constants.METHOD.QUEUE.DECLARE_OK        , Queue.DeclareOk    ],
    [constants.METHOD.QUEUE.BIND              , Queue.Bind         ],
    [constants.METHOD.QUEUE.BIND_OK           , Queue.BindOk       ],
    [constants.METHOD.QUEUE.UNBIND            , Queue.Unbind       ],
    [constants.METHOD.QUEUE.UNBIND_OK         , Queue.UnbindOk     ],
    [constants.METHOD.QUEUE.PURGE             , Queue.Purge        ],
    [constants.METHOD.QUEUE.PURGE_OK          , Queue.PurgeOk      ],
    [constants.METHOD.QUEUE.DELETE            , Queue.Delete       ],
    [constants.METHOD.QUEUE.DELETE_OK         , Queue.DeleteOk     ],
    [constants.METHOD.EXCHANGE.DECLARE        , Exchange.Declare   ],
    [constants.METHOD.EXCHANGE.DECLARE_OK     , Exchange.DeclareOk ],
    [constants.METHOD.EXCHANGE.DELETE         , Exchange.Delete    ],
    [constants.METHOD.EXCHANGE.DELETE_OK      , Exchange.DeleteOk  ],
    [constants.METHOD.EXCHANGE.BIND           , Exchange.Bind      ],
    [constants.METHOD.EXCHANGE.BIND_OK        , Exchange.BindOk    ],
    [constants.METHOD.EXCHANGE.UNBIND         , Exchange.Unbind    ],
    [constants.METHOD.EXCHANGE.UNBIND_OK      , Exchange.UnbindOk  ],
    [constants.METHOD.CONNECTION.START        , Connection.Start   ],
    [constants.METHOD.CONNECTION.START_OK     , Connection.StartOk ],
    [constants.METHOD.CONNECTION.SECURE       , Connection.Secure  ],
    [constants.METHOD.CONNECTION.SECURE_OK    , Connection.SecureOk],
    [constants.METHOD.CONNECTION.TUNE         , Connection.Tune    ],
    [constants.METHOD.CONNECTION.TUNE_OK      , Connection.TuneOk  ],
    [constants.METHOD.CONNECTION.OPEN         , Connection.Open    ],
    [constants.METHOD.CONNECTION.OPEN_OK      , Connection.OpenOk  ],
    [constants.METHOD.CONNECTION.CLOSE        , Connection.Close   ],
    [constants.METHOD.CONNECTION.CLOSE_OK     , Connection.CloseOk ],
    [constants.METHOD.CHANNEL.OPEN            , Channel.Open       ],
    [constants.METHOD.CHANNEL.OPEN_OK         , Channel.OpenOk     ],
    [constants.METHOD.CHANNEL.FLOW            , Channel.Flow       ],
    [constants.METHOD.CHANNEL.FLOW_OK         , Channel.FlowOk     ],
    [constants.METHOD.CHANNEL.CLOSE           , Channel.Close      ],
    [constants.METHOD.CHANNEL.CLOSE_OK        , Channel.CloseOk    ],
    [constants.METHOD.TRANSACTION.SELECT      , Tx.Select          ],
    [constants.METHOD.TRANSACTION.SELECT_OK   , Tx.SelectOk        ],
    [constants.METHOD.TRANSACTION.COMMIT      , Tx.Commit          ],
    [constants.METHOD.TRANSACTION.COMMIT_OK   , Tx.CommitOk        ],
    [constants.METHOD.TRANSACTION.ROLLBACK    , Tx.Rollback        ],
    [constants.METHOD.TRANSACTION.ROLLBACK_OK , Tx.RollbackOk      ],
    [constants.METHOD.CONFIRM.SELECT          , Confirm.Select     ],
    [constants.METHOD.CONFIRM.SELECT_OK       , Confirm.SelectOk   ]
]);

/**
 * @private
 */
class Model extends MethodFactory {

    /**
     *
     */
    constructor() {
        super();
    }

    /**
     * @param {!number} classMethodID
     * @return {Method}
     * @override
     */
    createMethod(classMethodID) {
        const ctor = registry.get(classMethodID);
        if (ctor)
            return new ctor();
        else
            throw ErrMsg(EC.METHOD_ID_INVALID, classMethodID);
    }

}

Model.Basic = Basic;
Model.Confirm = Confirm;
Model.Exchange = Exchange;
Model.Queue = Queue;
Model.Connection = Connection;
Model.Channel = Channel;
Model.Transaction = Tx;

module.exports = {
    Model : Model
};

