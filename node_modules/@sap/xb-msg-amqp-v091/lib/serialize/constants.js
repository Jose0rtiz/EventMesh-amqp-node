'use strict';

const { name, version } = require('../../package.json');

/**
 * @type {Object}
 * @private
 */
module.exports                              = Object.freeze({
    RUNTIME                                 : Object.freeze({
        LIBRARY                             : name,
        VERSION                             : version
    }),
    PROTOCOL                                : Object.freeze({
        NAME                                : 'AMQP',
        ID                                  : 0,
        VERSION                             : Object.freeze({
            MAJOR                           : 0,
            MINOR                           : 9,
            REVISION                        : 1
        })
    }),

    RCODE                                   : Object.freeze({
        REPLY_SUCCESS                       : 200,                 /* reserved, not used, general paradigm of reporting only errors */
        CONTENT_TOO_LARGE                   : 311,
        NO_ROUTE                            : 312,                 /* rabbit only */
        NO_CONSUMERS                        : 313,
        ACCESS_REFUSED                      : 403,
        NOT_FOUND                           : 404,
        RESOURCE_LOCKED                     : 405,
        PRECONDITION_FAILED                 : 406,
        CONNECTION_FORCED                   : 320,
        INVALID_PATH                        : 402,
        FRAME_ERROR                         : 501,
        SYNTAX_ERROR                        : 502,
        COMMAND_INVALID                     : 503,
        CHANNEL_ERROR                       : 504,
        UNEXPECTED_FRAME                    : 505,
        RESOURCE_ERROR                      : 506,
        NOT_ALLOWED                         : 530,
        NOT_IMPLEMENTED                     : 540,
        INTERNAL_ERROR                      : 541
    }),

    FRAME                                   : Object.freeze({
        TYPE                                : Object.freeze({
            METHOD                          : 0x01,
            HEADER                          : 0x02,
            BODY                            : 0x03,
            HEARTBEAT                       : 0x08
        }),
        SIZE                                : Object.freeze({
            HEADER                          : 7,
            END                             : 1,
            MINIMUM                         : 7 + 1                /* header + <initial payload> + end code */
        }),
        OFFSET                              : Object.freeze({
            TYPE                            : 0,
            CHANNEL                         : 1,
            SIZE                            : 3
        }),
        CODE                                : Object.freeze({
            END                             : 0xCE
        })
    }),

    CLASS                                   : Object.freeze({
        CONNECTION                          : 0x000A,              /* 10     */
        CHANNEL                             : 0x0014,              /* 20     */
        EXCHANGE                            : 0x0028,              /* 40     */
        QUEUE                               : 0x0032,              /* 50     */
        BASIC                               : 0x003C,              /* 60     */
        TRANSACTION                         : 0x005A,              /* 90     */
        CONFIRM                             : 0x0055               /* 85     */
    }),

    METHOD                                  : Object.freeze({
        CONNECTION                          : Object.freeze({
            START                           : 0x000A000A,          /* 10  10 */
            START_OK                        : 0x000A000B,          /* 10  11 */
            SECURE                          : 0x000A0014,          /* 10  20 */
            SECURE_OK                       : 0x000A0015,          /* 10  21 */
            TUNE                            : 0x000A001E,          /* 10  30 */
            TUNE_OK                         : 0x000A001F,          /* 10  31 */
            OPEN                            : 0x000A0028,          /* 10  40 */
            OPEN_OK                         : 0x000A0029,          /* 10  41 */
            CLOSE                           : 0x000A0032,          /* 10  50 */
            CLOSE_OK                        : 0x000A0033           /* 10  51 */
        }),
        CHANNEL                             : Object.freeze({
            OPEN                            : 0x0014000A,          /* 20  10 */
            OPEN_OK                         : 0x0014000B,          /* 20  11 */
            FLOW                            : 0x00140014,          /* 20  20 */
            FLOW_OK                         : 0x00140015,          /* 20  21 */
            CLOSE                           : 0x00140028,          /* 20  40 */
            CLOSE_OK                        : 0x00140029,          /* 20  41 */
        }),
        EXCHANGE                            : Object.freeze({
            DECLARE                         : 0x0028000A,          /* 40  10 */
            DECLARE_OK                      : 0x0028000B,          /* 40  11 */
            DELETE                          : 0x00280014,          /* 40  20 */
            DELETE_OK                       : 0x00280015,          /* 40  21 */
            BIND                            : 0x0028001E,          /* 40  30 */
            BIND_OK                         : 0x0028001F,          /* 40  31 */
            UNBIND                          : 0x00280028,          /* 40  40 */
            UNBIND_OK                       : 0x00280033           /* 40  51 */
        }),
        QUEUE                               : Object.freeze({
            DECLARE                         : 0x0032000A,          /* 50  10 */
            DECLARE_OK                      : 0x0032000B,          /* 50  11 */
            BIND                            : 0x00320014,          /* 50  20 */
            BIND_OK                         : 0x00320015,          /* 50  21 */
            UNBIND                          : 0x00320032,          /* 50  50 */
            UNBIND_OK                       : 0x00320033,          /* 50  51 */
            PURGE                           : 0x0032001E,          /* 50  30 */
            PURGE_OK                        : 0x0032001F,          /* 50  31 */
            DELETE                          : 0x00320028,          /* 50  40 */
            DELETE_OK                       : 0x00320029           /* 50  41 */
        }),
        BASIC                               : Object.freeze({
            QOS                             : 0x003C000A,          /* 60  10 */
            QOS_OK                          : 0x003C000B,          /* 60  11 */
            CONSUME                         : 0x003C0014,          /* 60  20 */
            CONSUME_OK                      : 0x003C0015,          /* 60  21 */
            CANCEL                          : 0x003C001E,          /* 60  30 */
            CANCEL_OK                       : 0x003C001F,          /* 60  31 */
            PUBLISH                         : 0x003C0028,          /* 60  40 */
            RETURN                          : 0x003C0032,          /* 60  50 */
            DELIVER                         : 0x003C003C,          /* 60  60 */
            GET                             : 0x003C0046,          /* 60  70 */
            GET_OK                          : 0x003C0047,          /* 60  71 */
            GET_EMPTY                       : 0x003C0048,          /* 60  72 */
            ACK                             : 0x003C0050,          /* 60  80 */
            REJECT                          : 0x003C005A,          /* 60  90 */
            RECOVER_ASYNC                   : 0x003C0064,          /* 60 100 */
            RECOVER                         : 0x003C006D,          /* 60 110 */
            RECOVER_OK                      : 0x003C006E,          /* 60 111 */
            NACK                            : 0x003C0078           /* 60 120     RABBIT specific */
        }),
        TRANSACTION                         : Object.freeze({
            SELECT                          : 0x005A000A,          /* 90  10 */
            SELECT_OK                       : 0x005A000B,          /* 90  11 */
            COMMIT                          : 0x005A0014,          /* 90  20 */
            COMMIT_OK                       : 0x005A0015,          /* 90  21 */
            ROLLBACK                        : 0x005A001E,          /* 90  30 */
            ROLLBACK_OK                     : 0x005A001F           /* 90  31 */
        }),
        CONFIRM                             : Object.freeze({
            SELECT                          : 0x0055000A,          /* 85  10 */
            SELECT_OK                       : 0x0055000B           /* 85  11 */
        })
    }),

    PROPERTY                                : Object.freeze({
        BASIC                               : Object.freeze({
            FLAG                            : Object.freeze({      /* array index, from most to least significant */
                CONTENT_TYPE                :  0,                  /* (1 << 15) */
                CONTENT_ENCODING            :  1,                  /* (1 << 14) */
                BASIC_HEADERS               :  2,                  /* (1 << 13) */
                DELIVERY_MODE               :  3,                  /* (1 << 12) */
                PRIORITY                    :  4,                  /* (1 << 11) */
                CORRELATION_ID              :  5,                  /* (1 << 10) */
                REPLY_TO                    :  6,                  /* (1 <<  9) */
                EXPIRATION                  :  7,                  /* (1 <<  8) */
                MESSAGE_ID                  :  8,                  /* (1 <<  7) */
                TIMESTAMP                   :  9,                  /* (1 <<  6) */
                TYPE                        : 10,                  /* (1 <<  5) */
                USER_ID                     : 11,                  /* (1 <<  4) */
                APP_ID                      : 12                   /* (1 <<  3) */
            }),
            DELIVERY_MODE                   : Object.freeze({
                NON_PERSISTENT              : 0x01,
                PERSISTENT                  : 0x02
            }),
            PRIORITY                        : Object.freeze({
                PRIORITY_0                  : 0x00,
                PRIORITY_1                  : 0x01,
                PRIORITY_2                  : 0x02,
                PRIORITY_3                  : 0x03,
                PRIORITY_4                  : 0x04,
                PRIORITY_5                  : 0x05,
                PRIORITY_6                  : 0x06,
                PRIORITY_7                  : 0x07,
                PRIORITY_8                  : 0x08,
                PRIORITY_9                  : 0x09
            }),
            DATA_PROPERTIES                 : Object.freeze({
                'contentType'               : {configurable : true, enumerable : true, writable : true, value : ''   },
                'contentEncoding'           : {configurable : true, enumerable : true, writable : true, value : ''   },
                'basicHeaders'              : {configurable : true, enumerable : true, writable : true, value : {}   },
                'persistent'                : {configurable : true, enumerable : true, writable : true, value : false},
                'priority'                  : {configurable : true, enumerable : true, writable : true, value : 0    },
                'correlationID'             : {configurable : true, enumerable : true, writable : true, value : ''   },
                'replyTo'                   : {configurable : true, enumerable : true, writable : true, value : ''   },
                'expiration'                : {configurable : true, enumerable : true, writable : true, value : ''   },
                'messageID'                 : {configurable : true, enumerable : true, writable : true, value : ''   },
                'timestamp'                 : {configurable : true, enumerable : true, writable : true, value : 0    },
                'type'                      : {configurable : true, enumerable : true, writable : true, value : ''   },
                'userID'                    : {configurable : true, enumerable : true, writable : true, value : ''   },
                'appID'                     : {configurable : true, enumerable : true, writable : true, value : ''   }
            })
        })
    }),

    BEHAVIOR                                : Object.freeze({
        ID                                  : Object.freeze({
            RABBIT                          : 0x01,
            QPID                            : 0x02,
            STANDARD                        : 0x04
        }),
        PRODUCT                             : Object.freeze({
            RABBIT                          : 'RabbitMQ',
            QPID                            : ''
        }),
        PEER                                : Object.freeze({
            PRODUCT                         : 'product',
            VERSION                         : 'version',
            PLATFORM                        : 'platform',
            CAPABILITIES                    : 'capabilities'
        }),
        CAPABILITIES                        : Object.freeze({
            RABBIT                          : Object.freeze({
                PUBLISHER_CONFIRMS          : 'publisher_confirms',
                EXCHANGE_EXCHANGE_BINDINGS  : 'exchange_exchange_bindings',
                BASIC_NACK                  : 'basic.nack',
                CONSUMER_CANCEL_NOTIFY      : 'consumer_cancel_notify',
                CONNECTION_BLOCKED          : 'connection.blocked',
                CONSUMER_PRIORITIES         : 'consumer_priorities',
                AUTH_FAILURE_CLOSE          : 'authentication_failure_close',
                PER_CONSUMER_QOS            : 'per_consumer_qos',
                DIRECT_REPLY_TO             : 'direct_reply_to'
            }),
            QPID                            : Object.freeze({
            }),
            STANDARD                        : Object.freeze({
            })
        }),

        TYPES                               : Object.freeze(
        {
            /*
                https://www.rabbitmq.com/amqp-0-9-1-errata.html -> Field Types

                0-9         0-9-1       Qpid/Rabbit Type              Remarks
                -------------------------------------------------------------
                            t           t           Boolean
                            b           b           Signed 8 - bit
                            B           B           Unsigned 8 - bit
                            U           s           Signed 16 - bit      (A1)
                            u           u           Unsigned 16 - bit
                I           I           I           Signed 32 - bit
                            i           i           Unsigned 32 - bit
                            L           l           Signed 64 - bit       (B)
                            l                       Unsigned 64 - bit
                            f           f           32 - bit float
                            d           d           64 - bit float
                D           D           D           Decimal
                            s                       Short string         (A2)
                S           S           S           Long string
                            A           A           Array                 (C)
                T           T           T           Timestamp(u64)
                F           F           F           Nested Table
                V           V           V           Void
                                        x           Byte array            (D)

                Remarks:

                A1, A2 : Notice how the types CONFLICT here.In Qpid and Rabbit,
                         's' means a signed 16 - bit integer; in 0 - 9 - 1, it means a
                         short string.

                B:       Notice how the signednesses CONFLICT here.In Qpid and Rabbit,
                         'l' means a signed 64 - bit integer; in 0 - 9 - 1, it means an unsigned
                         64 - bit integer.

                C:       I cannot find any discussion about the addition of this. Is my
                         archive missing a few messages ?

                D:       John[O'Hara]objected to this when he proposed his list. I believe it to
                         be vital : byte arrays are not strings.Furthermore, Qpid and
                         Rabbit already have code deployed that uses this type specifier.

            */

            INTERNAL                        : Object.freeze({
                BOOLEAN                     :  1,
                INT8                        :  2,
                UINT8                       :  3,
                INT16                       :  4,
                UINT16                      :  5,
                INT32                       :  6,
                UINT32                      :  7,
                INT64                       :  8,
                UINT64                      :  9,
                FLOAT                       : 10,
                DOUBLE                      : 11,
                DECIMAL                     : 12,
                SSTRING                     : 13,
                LSTRING                     : 14,
                ARRAY                       : 15,
                TIMESTAMP                   : 16,
                TABLE                       : 17,
                VOID                        : 18,
                BYTES                       : 19
            }),
            RABBIT                          : Object.freeze({
                BOOLEAN                     : 't',
                INT8                        : 'b',
                UINT8                       : 'B',
                INT16                       : 's',
                UINT16                      : 'u',
                INT32                       : 'I',
                UINT32                      : 'i',
                INT64                       : 'l',
             // UINT64
                FLOAT                       : 'f',
                DOUBLE                      : 'd',
                DECIMAL                     : 'D',
             // SSTRING
                LSTRING                     : 'S',
                ARRAY                       : 'A',
                TIMESTAMP                   : 'T',
                TABLE                       : 'F',
                VOID                        : 'V',
                BYTES                       : 'x'
            }),
            QPID                            : Object.freeze({
                BOOLEAN                     : 't',
                INT8                        : 'b',
                UINT8                       : 'B',
                INT16                       : 's',
                UINT16                      : 'u',
                INT32                       : 'I',
                UINT32                      : 'i',
                INT64                       : 'l',
             // UINT64
                FLOAT                       : 'f',
                DOUBLE                      : 'd',
                DECIMAL                     : 'D',
             // SSTRING
                LSTRING                     : 'S',
                ARRAY                       : 'A',
                TIMESTAMP                   : 'T',
                TABLE                       : 'F',
                VOID                        : 'V',
                BYTES                       : 'x'
            }),
            STANDARD                        : Object.freeze({
                BOOLEAN                     : 't',
                INT8                        : 'b',
                UINT8                       : 'B',
                INT16                       : 'U',
                UINT16                      : 'u',
                INT32                       : 'I',
                UINT32                      : 'i',
                INT64                       : 'L',
                UINT64                      : 'l',
                FLOAT                       : 'f',
                DOUBLE                      : 'd',
                DECIMAL                     : 'D',
                SSTRING                     : 's',
                LSTRING                     : 'S',
                ARRAY                       : 'A',
                TIMESTAMP                   : 'T',
                TABLE                       : 'F',
                VOID                        : 'V'
                // BYTES
            })
        }),
        TABLE                               : Object.freeze(
        {
            MAX_ENTRY_KEY_BYTES             : 128
        })
    }),

    SASL                                    : Object.freeze({
        MECHANISM                           : Object.freeze({
            PLAIN                           : 'PLAIN'
        })
    })

});

