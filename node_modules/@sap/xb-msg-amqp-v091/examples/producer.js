'use strict';

const data = { exchange: 'amq.topic', routingKey: 'a.b.c.d', confirms : false, mandatory: false, immediate : false, payload: Buffer.allocUnsafe(50).fill('X'), maxCount: 100000, logCount: 10000};
const options = Object.assign({
    // tls : { host : '127.0.0.1', port: 5671 }
    // net : { host : '127.0.0.1', port: 5672 }
    // sasl: { user: 'guest', password: 'guest' },
}, (process.argv.length > 2) ? require(process.argv[2]) : {}); options.data = Object.assign(data, options.data);

options.ostreams = {
    output: {channel: 1, exchange: options.data.exchange, routingKey: options.data.routingKey, confirms : options.data.confirms, mandatory : options.data.mandatory, immediate: options.data.immediate}
};

const { Client } = require('../');
const { ProduceStatistics } = require('./tools');
const stats = new ProduceStatistics(true, options.data.maxCount, options.data.logCount);
const message = { payload : options.data.payload, done : stats.onDone, failed : stats.onFailed };

const client = new Client(options);
const stream = client.ostream('output');
const channel = client.channel(1);

function send() {
    stats.onSend();

    let noPause = true;
    while (noPause && stats.countMessage()) {
        noPause = stream.write(message);
    }

    if (noPause) {
        stats.onStop();
    } else {
        stats.onWait();
    }
}

stats
    .on('info', (count) => {
        console.log(count);
    })
    .on('error', (error) => {
        console.log(error.message);
    })
    .on('done', () => {
        stream.end();
    })
;

stream
    .on('ready', () => {
        send();
    })
    .on('drain', () => {
        send();
    })
    .on('finish', () => {
        client.disconnect();
    })
;

channel
    .on('return', (code, text, exchange, routingKey) => {
        console.log('message not delivered:', code, text, exchange, routingKey);
    })
;

client
    .on('connected', (destination, brokerInfo) => {
        console.log('connected', brokerInfo.description);
        channel.open();
    })
    .on('error', (error) => {
        console.log(error.message);
    })
    .on('reconnecting', (destination) => {
        console.log('reconnecting, using destination ' + destination);
    })
    .on('disconnected', (hadError, byServer, statistics) => {
        console.log('disconnected');
        stats.print(statistics);
    })
;

client.connect();

