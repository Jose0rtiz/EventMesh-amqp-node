'use strict';

const { Client } = require('../');
const { JSONValidator } = require('./tools');

const options = Object.assign({
    // tls : { host : '127.0.0.1', port: 5671 }
    // net : { host : '127.0.0.1', port: 5672 }
    // sasl: { user: 'guest', password: 'guest' },
}, (process.argv.length > 2) ? require(process.argv[2]) : {});

options.istreams = {
    inputA: {channel: 1, exchange: '', routingKey: 'MyQueue', noAck: false},
    inputB: {channel: 1, exchange: 'amq.topic', routingKey: 'master.data.#', noAck: true}
};
options.ostreams = {
    output: {channel: 1, exchange: 'amq.topic', routingKey: 'a.b.c.d', mandatory: false, immediate: false}
};

const client = new Client(options);
const channel = client.channel(1);
const processor = new JSONValidator('inputA', 'inputB');

client.istream('inputA').pipe(processor);
client.istream('inputB').pipe(processor);
processor.pipe(client.ostream('output'));

processor
    .on('error', (error, message) => {
        console.log('invalid payload from ' + message.stream);
    })
;

channel
    .on('opened', () => {
        console.log('running');
    })
    .on('closed', (hadError) => {
        client.disconnect();
    })
;

client
    .on('connected', (destination, brokerInfo) => {
        console.log('connected', brokerInfo.description);
        client.channel(1).open();
    })
    .on('error', (error) => {
        console.log(error.message);
    })
    .on('reconnecting', (destination) => {
        console.log('reconnecting, using destination ' + destination);
    })
    .on('disconnected', (hadError, byServer, statistics) => {
        console.log('disconnected');
    })
;

client.connect();

