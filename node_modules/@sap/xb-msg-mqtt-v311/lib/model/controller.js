'use strict';

const EventEmitter = require('events');
const { Writable, Transform } = require('stream');
const { EC, ErrMsg } = require('../errors');
const { Matcher } = require('../tools/matcher');
const { Publish, PublishAcknowledge, PublishReceived, PublishRelease, PublishComplete, Subscribe, Unsubscribe } = require('./packets');

const constants = require('../serialize/constants');
const AT_MOST_ONCE = constants.QOS.AT_MOST_ONCE;
const AT_LEAST_ONCE = constants.QOS.AT_LEAST_ONCE;
const EXACTLY_ONCE = constants.QOS.EXACTLY_ONCE;

/**
 * @private
 */
class PacketStream extends Transform {

    /**
     * @param {ConnectOptions} options
     */
    constructor(options) {

        const count = options.mqtt.maxPacketID;
        const packetIDs = new Array(count);
        for (let i = 0; i < count; ) packetIDs[i] = ++i;

        super({
            decodeStrings: false,
            allowHalfOpen: false,
            highWaterMark: undefined,
            writableObjectMode: true,
            writableHighWaterMark: options.tune.ostreamHighWaterFrames, // as of nodeJS 8, fixed in Aug 2017
            readableObjectMode: true,
            readableHighWaterMark: options.tune.ostreamHighWaterFrames, // as of nodeJS 8, fixed in Aug 2017
        });

        /**
         * @type {!Array<PacketID>}
         */
        this._freeIDs = packetIDs;

        /**
         * @type {!Map<PacketID, PacketIdentifiable>}
         */
        this._usedIDs = new Map();

        /**
         * @type {!Array<{packet : PacketIdentifiable, callback : function(Error=, PacketIdentifiable=)}>}
         */
        this._waiting = [];

    }

    /**
     * @param {PacketID} packetID
     * @return {Packet}
     */
    retrieve(packetID) {
        const packet = this._usedIDs.get(packetID);
        if (packet)
            return /**@type{Packet}*/ packet;
        else
            throw ErrMsg(EC.DECODE_PACKET_ID_UNEXPECTED, packetID);
    }

    /**
     * @param {PacketID} packetID
     */
    recycle(packetID) {
        if(this._waiting.length) {
            const { packet, callback } = this._waiting.shift();
            packet.packetID = packetID;
            this._usedIDs.set(packetID, packet);                // replace assigned packet
            callback(null, packet);
        } else {
            this._freeIDs.push(packetID);
            this._usedIDs.delete(packetID);                     // release assigned packet
        }
    }

    /**
     * @param {!PacketIdentifiable} packet
     * @param {!string} encoding
     * @param {!function(Error=, PacketIdentifiable=)} callback
     * @override
     */
    _transform(packet, encoding, callback) {
        if (this._freeIDs.length) {
            packet.packetID = this._freeIDs.pop();
            this._usedIDs.set(packet.packetID, packet);
            callback(null, packet);
        } else {
            this._waiting.push({packet : packet, callback : callback});
        }
    }

}

/**
 * @private
 */
class PublishState extends EventEmitter {

    /**
     * @event PublishState#error
     * @type {!Error}
     * @private
     */

    /**
     *
     */
    constructor() {
        super();

        /**
         * @type {PacketStream}
         * @private
         */
        this._packetStream = null;

        /**
         * @type {Writable}
         * @private
         */
        this._directStream = null;

        /**
         * @type {Set<Publish>}
         * @private
         */
        this._sendAtMostOnce = new Set();

        /**
         * @type {Set<Publish>}
         * @private
         */
        this._sendAtLeastOnce = new Set();

        /**
         * @type {Set<Publish>}
         * @private
         */
        this._sendExactlyOnce = new Set();

        /**
         * @type {Set<PacketID>}
         * @private
         */
        this._receivedExactlyOnce = new Set();

    }

    /**
     * @param {PacketStream} packetStream
     * @param {Writable} directStream
     * @param {boolean} sessionPresent
     */
    onConnectionValid(packetStream, directStream, sessionPresent) {
        this._packetStream = packetStream;
        this._directStream = directStream;
        if (sessionPresent === false) {
            this._receivedExactlyOnce.clear();
        }
        for (const publish of this._sendAtMostOnce.values()) {
            this._directStream.write(publish);
        }
        for (const publish of this._sendAtLeastOnce.values()) {
            publish.duplicate = true;
            this._packetStream.write(publish);
        }
        for (const publish of this._sendExactlyOnce.values()) {
            publish.duplicate = true;
            this._packetStream.write(publish);
        }
    }

    /**
     *
     */
    onConnectionFinal() {
        this._directStream = null;
    }

    /**
     * @param {boolean} byServer
     */
    onConnectionClose(byServer) {
        this._packetStream = null;
        this._directStream = null;

        if (!byServer) {
            const error = ErrMsg(EC.MSG_DISCARD_ON_DISCONNECT);
            for (const publish of this._sendAtMostOnce.values()) {
                publish.onFailure(error);
            }
            for (const publish of this._sendAtLeastOnce.values()) {
                publish.onFailure(error);
            }
            for (const publish of this._sendExactlyOnce.values()) {
                publish.onFailure(error);
            }
        }
    }

    /**
     * @param {!Publish} packet
     * @return {boolean}
     */
    onOutboundPublishAtMostOnce(packet) {
        this._sendAtMostOnce.add(packet);
        if (this._directStream === null) return false; // connection inactive
        packet.onStarted = () => this._onOutboundPublishAtMostOnceSent(packet);
        return this._directStream.write(packet);
    }

    /**
     * @param {!Publish} packet
     * @return {boolean}
     */
    onOutboundPublishAtLeastOnce(packet) {
        this._sendAtLeastOnce.add(packet);
        if (this._directStream === null) return false; // connection inactive
        return this._packetStream ? this._packetStream.write(packet) : false;
    }

    /**
     * @param {!Publish} packet
     * @return {boolean}
     */
    onOutboundPublishExactlyOnce(packet) {
        this._sendExactlyOnce.add(packet);
        if (this._directStream === null) return false; // connection inactive
        return this._packetStream ? this._packetStream.write(packet) : false;
    }

    /**
     * @param {!Publish} packet
     */
    _onOutboundPublishAtMostOnceSent(packet) {
        this._sendAtMostOnce.delete(packet);
        packet.onDispose();
    }

    /**
     * @param {!PublishAcknowledge} packet
     */
    onOutboundPublishAcknowledge(packet) {
        if (this._packetStream) {
            const publish = /** @type {Publish} */ this._packetStream.retrieve(packet.packetID);
            if (!this._sendAtLeastOnce.delete(publish)) {
                throw ErrMsg(EC.DECODE_PACKET_ID_MISMATCH, packet.constructor.name, packet.packetID);
            }
            this._packetStream.recycle(publish.packetID);
            publish.onDispose();
        }
    }

    /**
     * @param {!PublishReceived} packet
     */
    onOutboundPublishReceived(packet) {
        if (this._packetStream) {
            const publish = /** @type {Publish} */ this._packetStream.retrieve(packet.packetID);
            if (this._directStream) this._directStream.write(new PublishRelease(packet.packetID));
            if (!this._sendExactlyOnce.delete(publish)) {
                throw ErrMsg(EC.DECODE_PACKET_ID_MISMATCH, packet.constructor.name, packet.packetID);
            }
            publish.onDispose();
        }
    }

    /**
     * @param {!PublishComplete} packet
     */
    onOutboundPublishComplete(packet) {
        if (this._packetStream) {
            this._packetStream.recycle(packet.packetID);
        }
    }

    /**
     * @param {!Publish} packet
     */
    onInboundPublish(packet) {
        switch(packet.qos) {
            case AT_MOST_ONCE: {
                packet.receiver.forEach((handler) => {
                    if (handler.length < 5) {
                        handler(packet.topic, packet.payload, packet.qos, undefined);
                    } else {
                        handler(packet.topic, packet.payload, packet.qos, undefined,
                            (error) => {
                                if (!packet.receiver.delete(handler)) {
                                    throw ErrMsg(EC.MSG_DONE_NOT_EXPECTED);
                                }
                                if (error) {
                                    this.emit('error', error);
                                }
                            }
                        );
                    }
                });
                break;
            }
            case AT_LEAST_ONCE: {
                if (this._directStream === null) {                       // don't dispatch what can't be acknowledged
                    return;
                }
                if (packet.receiver.size === 0) {
                    this._directStream.write(new PublishAcknowledge(packet.packetID));
                    return;
                }
                packet.receiver.forEach((handler) => {
                    if (handler.length < 5) {
                        handler(packet.topic, packet.payload, packet.qos, packet.duplicate);
                        packet.receiver.delete(handler);
                        if (packet.receiver.size === 0) {
                            this._directStream.write(new PublishAcknowledge(packet.packetID));
                        }
                    } else {
                        const directStream = this._directStream;         // reply only to this stream
                        handler(packet.topic, packet.payload, packet.qos, packet.duplicate,
                            (error) => {
                                if (!packet.receiver.delete(handler)) {
                                    throw ErrMsg(EC.MSG_DONE_NOT_EXPECTED);
                                }
                                if (packet.receiver.size === 0 && this._directStream === directStream) {
                                    this._directStream.write(new PublishAcknowledge(packet.packetID));
                                }
                                if (error) {
                                    this.emit('error', error);
                                }
                            }
                        );
                    }
                });
                break;
            }
            case EXACTLY_ONCE: {
                if (this._directStream === null) {                       // don't dispatch what can't be acknowledged
                    return;
                }
                if(this._receivedExactlyOnce.has(packet.packetID)) {
                    this._directStream.write(new PublishReceived(packet.packetID));
                    return;
                }
                this._receivedExactlyOnce.add(packet.packetID);

                if (packet.receiver.size === 0) {
                    this._directStream.write(new PublishReceived(packet.packetID));
                    return;
                }
                packet.receiver.forEach((handler) => {
                    if (handler.length < 5) {
                        handler(packet.topic, packet.payload, packet.qos, false);
                        packet.receiver.delete(handler);
                        if (packet.receiver.size === 0) {
                            this._directStream.write(new PublishReceived(packet.packetID));
                        }
                    } else {
                        handler(packet.topic, packet.payload, packet.qos, false,
                            (error) => {
                                if (!packet.receiver.delete(handler)) {
                                    throw ErrMsg(EC.MSG_DONE_NOT_EXPECTED);
                                }
                                if (packet.receiver.size === 0 && this._receivedExactlyOnce.has(packet.packetID)) {
                                    this._directStream.write(new PublishReceived(packet.packetID));
                                }
                                if (error) {
                                    this.emit('error', error);
                                }
                            }
                        );
                    }
                });
                break;
            }
        }

    }

    /**
     * @param {!PublishRelease} packet
     */
    onInboundPublishRelease(packet) {
        if (this._directStream) {
            this._receivedExactlyOnce.delete(packet.packetID);
            this._directStream.write(new PublishComplete(packet.packetID));
        }
    }

}

/**
 * @typedef {Object} Subscription
 * @property {!ReceiveCallback} handler
 * @property {number} qos
 * @private
 */

/**
 * @typedef {Object} TopicSubscriptions
 * @property {Array<Subscription>} subscriptions
 * @property {number} qos
 * @private
 */

/**
 * @typedef {Object} PatternSubscriptions
 * @property {Array<Subscription>} subscriptions
 * @property {number} qos
 * @property {RegExp} regexp
 * @private
 */

/**
 * @private
 */
class SubscriptionState extends EventEmitter {

    /**
     *
     */
    constructor() {
        super();

        /**
         * @type {PacketStream}
         * @private
         */
        this._packetStream = null;

        /**
         * @type {!Set<Packet>}
         * @private
         */
        this._packetBuffer = new Set();

        /**
         * @const {!Map<!string, !TopicSubscriptions>}
         * @private
         */
        this._usedTopics = new Map();

        /**
         * @const {!Map<!string, !PatternSubscriptions>}
         * @private
         */
        this._usedPatterns = new Map();
    }

    /**
     * @param {PacketStream} stream
     * @param {NotifyOfFailed} failed
     */
    onConnectionValid(stream, failed) {
        this._packetStream = stream;
        let requested = new Set();
        for (const packet of this._packetBuffer) {
            if (packet.constructor === Subscribe) for (const item of /**@type {Array<string>}*/ packet.topicFilters) {
                requested.add(item.filter);
            }
            if (packet.constructor === Unsubscribe) for (const item of /**@type {Array<string>}*/ packet.topicFilters) {
                requested.delete(item.filter);
            }
        }

        const subscribe = new Subscribe();
        for (const [topic, entry] of this._usedTopics.entries()) {
            if (!requested.has(topic)) subscribe.add(topic, entry.qos);
        }
        for (const [pattern, entry] of this._usedPatterns.entries()) {
            if (!requested.has(pattern)) subscribe.add(pattern, entry.qos);
        }

        if (subscribe.topicFilters.length) {                    // repeat completed requests from previous connection
            subscribe.onResponse = nop;
            subscribe.onFailure = failed;
            this._packetStream.write(subscribe);
        }

        for (const packet of this._packetBuffer) {
            this._packetStream.write(packet);
        }
    }

    /**
     *
     */
    onConnectionFinal() {
        this._packetStream = null;
    }

    /**
     *
     */
    onConnectionClose() {
        this._packetStream = null;
    }

    /**
     * @param {!Array<string>} topics
     * @param {!Array<string>} patterns
     * @param {!number} qos
     * @param {!ReceiveCallback} handler
     * @param {!NotifyOfSubscribeDone} done
     * @param {!NotifyOfFailed} failed
     */
    onSubscribeRequested(topics, patterns, qos, handler, done, failed) {
        const subscribe = new Subscribe();

        this._insertInboundPublishHandler(this._usedTopics, topics, qos, handler, false, subscribe);
        this._insertInboundPublishHandler(this._usedPatterns, patterns, qos, handler, true, subscribe);

        subscribe.handler = handler;
        subscribe.onResponse = done;
        subscribe.onFailure = failed;

        this._packetBuffer.add(subscribe);
        if (this._packetStream) this._packetStream.write(subscribe);
    }

    /**
     * @param {!SubscribeAcknowledge} packet
     */
    onSubscribeAcknowledge(packet) {
        const subscribe = this._packetStream.retrieve(packet.packetID);
        this._packetStream.recycle(packet.packetID);
        this._packetBuffer.delete(subscribe);

        const accepted = new Map();
        const rejected = new Set();
        packet.qosList.forEach((response, index) => {
            const request = subscribe.topicFilters[index];
            if (response.failed) {
                rejected.add(request.filter);
            } else {
                accepted.set(request.filter, {granted : response.qos, requested : request.qos});
            }
        });

        this._removeInboundPublishHandler(null, Array.from(rejected), subscribe.handler, null, null);
        subscribe.onResponse(accepted, rejected);
    }

    /**
     * @param {!Array<string>} topics
     * @param {!Array<string>} patterns
     * @param {!NotifyOfDone} done
     * @param {ReceiveCallback=} handler
     * @param {!NotifyOfFailed} failed
     */
    onUnsubscribeRequested(topics, patterns, handler, done, failed) {
        const unsubscribe = new Unsubscribe();
        const subscribe = new Subscribe();     // updated (reduced) qos is possible

        if (handler) {
            this._removeInboundPublishHandler(this._usedTopics, topics, handler, unsubscribe, subscribe);
            this._removeInboundPublishHandler(this._usedPatterns, patterns, handler, unsubscribe, subscribe);
        } else {
            this._removeInboundPublishFilters(this._usedTopics, topics, unsubscribe);
            this._removeInboundPublishFilters(this._usedPatterns, patterns, unsubscribe);
        }

        unsubscribe.onResponse = done;
        unsubscribe.onFailure = failed;

        if (unsubscribe.topicFilters.length) {
            this._packetBuffer.add(unsubscribe);
            if (this._packetStream) this._packetStream.write(unsubscribe);
        } else {
            unsubscribe.onResponse();
        }

        if (subscribe.topicFilters.length) {
            subscribe.onResponse = nop;
            subscribe.onFailure = nop;
            this._packetBuffer.add(subscribe);
            if (this._packetStream) this._packetStream.write(subscribe);
        }
    }

    /**
     * @param {!UnsubscribeAcknowledge} packet
     */
    onUnsubscribeAcknowledge(packet) {
        const unsubscribe = this._packetStream.retrieve(packet.packetID);
        this._packetStream.recycle(packet.packetID);
        this._packetBuffer.delete(unsubscribe);
        unsubscribe.onResponse();
    }

    /**
     * @param {Map<!string, !Object>} buffer
     * @param {Array<!string>} filters
     * @param {number} qos
     * @param {ReceiveCallback} handler
     * @param {boolean} regexp
     * @param {Subscribe} subscribe
     * @private
     */
    _insertInboundPublishHandler(buffer, filters, qos, handler, regexp, subscribe) {
        filters.forEach((filter) => {
            let entry = buffer.get(filter);
            if (entry) {
                const data = entry.subscriptions.reduce((data, item) => {
                    if (item.handler === handler) {
                        item.qos = qos;
                        data.add = false;
                    }
                    data.qos = Math.max(data.qos, item.qos);
                    return data;
                }, {add : true, qos: qos});
                if (data.add) {
                    entry.subscriptions.push({handler : handler, qos : qos});
                }
                entry.qos = data.qos;
            } else {
                entry = {subscriptions : [{handler : handler, qos : qos}], qos : qos, regexp : regexp ? Matcher.filterToRegExp(filter) : null};
                buffer.set(filter, entry);
            }
            subscribe.add(filter, entry.qos);
        });
    }

    /**
     * @param {!Map<!string, !Object>} buffer
     * @param {!Array<!string>} filters
     * @param {!Unsubscribe} unsubscribe
     * @private
     */
    _removeInboundPublishFilters(buffer, filters, unsubscribe) {
        filters.forEach((filter) => {
            if (buffer.delete(filter)) {
                unsubscribe.add(filter);
            }
        });
    }

    /**
     * @param {?Map<!string, !Object>} buffer
     * @param {!Array<!string>} filters
     * @param {!ReceiveCallback} handler
     * @param {?Unsubscribe} unsubscribe
     * @param {?Subscribe} subscribe
     * @private
     */
    _removeInboundPublishHandler(buffer, filters, handler, unsubscribe, subscribe) {
        filters.forEach((filter) => {
            let buf = null;
            if (buffer) {
                buf = buffer;
            } else if (Matcher.isFilterPattern(filter)) {
                buf = this._usedPatterns;
            } else {
                buf = this._usedTopics;
            }
            const entry = buf.get(filter);
            if (!entry) return;

            let qos = 0;
            entry.subscriptions = entry.subscriptions.filter((subscription)=> {
                if (handler === subscription.handler) {
                    return false;
                } else {
                    qos = Math.max(qos, subscription.qos);
                    return true;
                }
            });
            if (entry.subscriptions.length === 0) {
                buf.delete(filter);
                if (unsubscribe) unsubscribe.add(filter);
            } else if (qos !== entry.qos) {
                entry.qos = qos;
                if (subscribe) subscribe.add(filter, entry.qos);
            }
        });
    }

    /**
     * @param {!string} topic
     * @return {!Set<!ReceiveCallback>}
     */
    collectInboundPublishHandler(topic) {
        const list = new Set();

        for (const entry of this._usedPatterns.values())
            if (Matcher.matchOnRegExp(entry.regexp, topic))
                for (const item of entry.subscriptions) list.add(item.handler);

        const entry = this._usedTopics.get(topic);
        if (entry)
            for (const item of entry.subscriptions) list.add(item.handler);

        return list;
    }

}

/**
 * @param {*=} result
 * @return {*}
 * @private
 */
function nop(result) { return result; }

module.exports = {
    PacketStream : PacketStream,
    PublishState : PublishState,
    SubscriptionState : SubscriptionState,
    nop : nop
};

