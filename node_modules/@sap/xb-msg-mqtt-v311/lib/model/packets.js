'use strict';

const { EC, ErrMsg } = require('../errors');
const { Packet } = require('../serialize/types');

const constants = require('../serialize/constants');
const PROTO_NAME = constants.PROTOCOL.NAME;
const PROTO_LEVEL = constants.PROTOCOL.LEVEL;

const CONNECT = constants.PACKET.TYPES.CONNECT;
const CONNACK = constants.PACKET.TYPES.CONNACK;
const PUBLISH = constants.PACKET.TYPES.PUBLISH;
const PUBACK = constants.PACKET.TYPES.PUBACK;
const PUBREC = constants.PACKET.TYPES.PUBREC;
const PUBREL = constants.PACKET.TYPES.PUBREL;
const PUBCOMP = constants.PACKET.TYPES.PUBCOMP;
const SUBSCRIBE = constants.PACKET.TYPES.SUBSCRIBE;
const SUBACK = constants.PACKET.TYPES.SUBACK;
const UNSUBSCRIBE = constants.PACKET.TYPES.UNSUBSCRIBE;
const UNSUBACK = constants.PACKET.TYPES.UNSUBACK;
const PINGREQ = constants.PACKET.TYPES.PINGREQ;
const PINGRESP = constants.PACKET.TYPES.PINGRESP;
const DISCONNECT = constants.PACKET.TYPES.DISCONNECT;

const AT_MOST_ONCE = constants.QOS.AT_MOST_ONCE;
const AT_LEAST_ONCE = constants.QOS.AT_LEAST_ONCE;
const EXACTLY_ONCE = constants.QOS.EXACTLY_ONCE;

const CON_CLEAN_SESSION = constants.CONNECT.FLAG.CLEAN_SESSION;
const CON_WILL_USED = constants.CONNECT.FLAG.WILL.USED;
const CON_WILL_RETAIN = constants.CONNECT.FLAG.WILL.RETAIN;
const CON_WILL_QOS_BIT_MASK = constants.CONNECT.FLAG.WILL.QOS.BIT_MASK;
const CON_WILL_AT_MOST_ONCE = constants.CONNECT.FLAG.WILL.QOS.AT_MOST_ONCE;
const CON_WILL_AT_LEAST_ONCE = constants.CONNECT.FLAG.WILL.QOS.AT_LEAST_ONCE;
const CON_WILL_EXACTLY_ONCE = constants.CONNECT.FLAG.WILL.QOS.EXACTLY_ONCE;
const CON_CRED_USER = constants.CONNECT.FLAG.USER;
const CON_CRED_PASSWORD = constants.CONNECT.FLAG.PASSWORD;

const CONACK_SESSION_PRESENT = constants.CONNACK.FLAG.SESSION_PRESENT;

const PUB_DUPLICATE = constants.PUBLISH.FLAG.DUPLICATE;
const PUB_QOS_BIT_MASK = constants.PUBLISH.FLAG.QOS.BIT_MASK;
const PUB_AT_MOST_ONCE = constants.PUBLISH.FLAG.QOS.AT_MOST_ONCE;
const PUB_AT_LEAST_ONCE = constants.PUBLISH.FLAG.QOS.AT_LEAST_ONCE;
const PUB_EXACTLY_ONCE = constants.PUBLISH.FLAG.QOS.EXACTLY_ONCE;
const PUB_RETAIN = constants.PUBLISH.FLAG.RETAIN;

const PUBREL_RESERVED = constants.PUBREL.FLAG.RESERVED;
const UNSUB_RESERVED = constants.UNSUBSCRIBE.FLAG.RESERVED;
const SUB_RESERVED = constants.SUBSCRIBE.FLAG.RESERVED;

const SUBACK_AT_MOST_ONCE = constants.SUBACK.RC.AT_MOST_ONCE;
const SUBACK_AT_LEAST_ONCE = constants.SUBACK.RC.AT_LEAST_ONCE;
const SUBACK_EXACTLY_ONCE = constants.SUBACK.RC.EXACTLY_ONCE;
const SUBACK_FAILURE = constants.SUBACK.RC.FAILURE;

/**
 * @private
 */
class Connect extends Packet {

    /**
     *
     */
    constructor() {
        super(CONNECT);

        /**
         * @type {string}
         */
        this.clientID = '';

        /**
         * @type {boolean}
         */
        this.cleanSession = false;

        /**
         * @type {boolean}
         */
        this.willFlag = false;

        /**
         * @type {number}
         */
        this.willQoS = AT_MOST_ONCE;

        /**
         * @type {boolean}
         */
        this.willRetain = false;

        /**
         * @type {?string}
         */
        this.willTopic = null;

        /**
         * @type {?Buffer}
         */
        this.willMessage = null;

        /**
         * @type {?string}
         */
        this.user = null;

        /**
         * @type {?string}
         */
        this.password = null;

        /**
         * @type {number}
         */
        this.keepAlive = 0;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        let length = 10 + 2 + this.clientID.length;

        if(this.willFlag)
            length += 2 + this.willTopic.length + 2 + this.willMessage.length;

        if(this.user)
            length += 2 + this.user.length;

        if(this.password)
            length += 2 + this.password.length;

        return length;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {

        // variable header

        encoder.writeString(PROTO_NAME);
        encoder.writeUInt8(PROTO_LEVEL);

        let flags = 0x00;
        if(this.cleanSession)
            flags |= CON_CLEAN_SESSION;
        if(this.willFlag) {
            flags |= CON_WILL_USED;
            switch (this.willQoS) {
                case AT_MOST_ONCE:
                    flags |= CON_WILL_AT_MOST_ONCE;
                    break;
                case AT_LEAST_ONCE:
                    flags |= CON_WILL_AT_LEAST_ONCE;
                    break;
                case EXACTLY_ONCE:
                    flags |= CON_WILL_EXACTLY_ONCE;
                    break;

            }
            if(this.willRetain) {
                flags |= CON_WILL_RETAIN;
            }
        }
        if(this.user)
            flags |= CON_CRED_USER;
        if(this.password)
            flags |= CON_CRED_PASSWORD;

        encoder.writeUInt8(flags);
        encoder.writeUInt16(this.keepAlive);

        // payload

        encoder.writeString(this.clientID);

        if(this.willFlag) {
            encoder.writeString(this.willTopic);
            encoder.writeBlob16(this.willMessage);
        }

        if(this.user)
            encoder.writeString(this.user);
        if(this.password)
            encoder.writeString(this.password);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {

        // variable header

        //noinspection JSUnusedLocalSymbols
        const protocol = decoder.readString();
        //noinspection JSUnusedLocalSymbols
        const level = decoder.readUInt8();

        const flags = decoder.readUInt8();
        this.cleanSession = (flags & CON_CLEAN_SESSION) !== 0;
        this.willFlag = (flags & CON_WILL_USED) !== 0;
        if (this.willFlag) {
            switch (flags & CON_WILL_QOS_BIT_MASK) {
                case CON_WILL_AT_MOST_ONCE:
                    this.willQoS = AT_MOST_ONCE;
                    break;
                case CON_WILL_AT_LEAST_ONCE:
                    this.willQoS = AT_LEAST_ONCE;
                    break;
                case CON_WILL_EXACTLY_ONCE:
                    this.willQoS = EXACTLY_ONCE;
                    break;
                default:
                    throw ErrMsg(EC.DECODE_INV_WILL_QOS);
            }
            this.willRetain = (flags & CON_WILL_RETAIN) !== 0;
        }
        this.keepAlive = decoder.readUInt16();

        // payload

        this.clientID = decoder.readString();

        if(this.willFlag) {
            this.willTopic = decoder.readString();
            this.willMessage = decoder.readBlob16();
        }

        if((flags & CON_CRED_USER) !== 0)
            this.user = decoder.readString();
        if((flags & CON_CRED_PASSWORD) !== 0)
            this.password = decoder.readString();
    }

}

/**
 * @private
 */
class ConnectAcknowledge extends Packet {

    /**
     *
     */
    constructor() {
        super(CONNACK);

        /**
         * @type {boolean}
         */
        this.sessionPresent = false;

        /**
         * @type {number}
         */
        this.returnCode = 0;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 2;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt8(this.sessionPresent ? CONACK_SESSION_PRESENT : 0x00);
        encoder.writeUInt8(this.returnCode);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.sessionPresent = (decoder.readUInt8() === CONACK_SESSION_PRESENT);
        this.returnCode = decoder.readUInt8();
    }

}

/**
 * @private
 */
class Publish extends Packet {

    /**
     *
     */
    constructor() {
        super(PUBLISH);

        /**
         * @type {boolean}
         */
        this.duplicate = false;

        /**
         * @type {number}
         */
        this.qos = AT_MOST_ONCE;

        /**
         * @type {boolean}
         */
        this.retain = false;

        /**
         * @type {string}
         */
        this.topic = null;

        /**
         * @type {?number}
         */
        this.packetID = 0;

        /**
         * @type {?(Buffer|Payload)}
         */
        this.payload = null;

        /** ------------- runtime support ------------- */

        /**
         * @type {?function()}
         */
        this.onStarted = null;

        /**
         * @type {?function()}
         */
        this.onDispose = null;

        // noinspection JSUnusedGlobalSymbols
        /**
         * @type {?function(!Error)}
         */
        this.onFailure = null;

        /**
         * @type {?Set<function()>}
         */
        this.receiver = null;

        /** ------------------------------------------- */

    }

    /**
     * @return {number}
     * @override
     */
    serializing() {

        // write packet flags

        if (this.duplicate)
            this.flags |= PUB_DUPLICATE;

        switch (this.qos) {
            case AT_LEAST_ONCE:
                this.flags |= PUB_AT_LEAST_ONCE;
                break;
            case EXACTLY_ONCE:
                this.flags |= PUB_EXACTLY_ONCE;
                break;
        }

        if (this.retain)
            this.flags |= PUB_RETAIN;

        // calculate variable length

        let length = 2 + (this.topic ? this.topic.length : 0);

        if ((this.flags & PUB_QOS_BIT_MASK) !== 0)
            length += 2;       // for packet id

        if (this.payload) {
            if (Buffer.isBuffer(this.payload)) {
                length += this.payload.length;
            } else if (Array.isArray(this.payload)) {
                for (const chunk of this.payload) length += chunk.length;
            }
        }

        return length;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {

        // variable header

        encoder.writeString(this.topic);

        if (0 !== (this.flags & PUB_QOS_BIT_MASK))
            encoder.writeUInt16(/** @type {?number} */ (this.packetID));

        // payload

        if (this.payload) {
            if (Buffer.isBuffer(this.payload)) {
                encoder.writeDataBlob(/** @type {Buffer} */ this.payload);
            } else if (Array.isArray(this.payload)) {
                for (const chunk of this.payload) if (chunk.length) encoder.writeDataBlob(chunk);
            }
        }

        // packet control

        if (typeof this.onStarted === 'function') this.onStarted();
    }

    /**
     * @param {!Decoder} reader
     * @override
     */
    deserialize(reader) {

        // read flags

        this.duplicate = ((this.flags & PUB_DUPLICATE) !== 0);

        switch(this.flags & PUB_QOS_BIT_MASK) {
            case PUB_AT_MOST_ONCE:
                this.qos = AT_MOST_ONCE;
                break;
            case PUB_AT_LEAST_ONCE:
                this.qos = AT_LEAST_ONCE;
                break;
            case PUB_EXACTLY_ONCE:
                this.qos = EXACTLY_ONCE;
                break;
            default:
                throw ErrMsg(EC.DECODE_INV_QOS);
        }

        this.retain = ((this.flags & PUB_RETAIN) !== 0);

        // variable header

        this.topic = reader.readString();

        if(0 !== (this.flags & PUB_QOS_BIT_MASK))
            this.packetID = reader.readUInt16();

        // payload

        this.payload = reader.readPayload();

    }

}

/**
 * @private
 */
class PublishAcknowledge extends Packet {

    /**
     * @param {number=} packetID
     */
    constructor(packetID = 0) {
        super(PUBACK);

        /**
         * @type {number}
         */
        this.packetID = packetID;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 2;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.packetID);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.packetID = decoder.readUInt16();
    }

}

/**
 * @private
 */
class PublishReceived extends Packet {

    /**
     * @param {number=} packetID
     */
    constructor(packetID = 0) {
        super(PUBREC);

        /**
         * @type {!number}
         */
        this.packetID = packetID;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 2;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.packetID);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.packetID = decoder.readUInt16();
    }

}

/**
 * @private
 */
class PublishRelease extends Packet {

    /**
     * @param {number=} packetID
     */
    constructor(packetID = 0) {
        super(PUBREL);

        /**
         * @type {number}
         */
        this.packetID = packetID;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        // write packet flags
        this.flags = PUBREL_RESERVED;
        // variable header
        return 2;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.packetID);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.packetID = decoder.readUInt16();
    }

}

/**
 * @private
 */
class PublishComplete extends Packet {

    /**
     * @param {number=} packetID
     */
    constructor(packetID = 0) {
        super(PUBCOMP);

        /**
         * @type {number}
         */
        this.packetID = packetID;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 2;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.packetID);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.packetID = decoder.readUInt16();
    }

}

/**
 * @private
 */
class Subscribe extends Packet {

    /**
     *
     */
    constructor() {
        super(SUBSCRIBE);

        /**
         * @type {number}
         */
        this.packetID = 0;

        /**
         * @type {!Array<!{filter : string, qos : number}>}
         */
        this.topicFilters = [];

        /** ------------- runtime support ------------- */

        /**
         * @type {?function()}
         */
        this.handler = null;

        /**
         * @type {?function()}
         */
        this.onResponse = null;

        /**
         * @type {?function(!Error)}
         */
        this.onFailure = null;

        /** ------------------------------------------- */

    }

    /**
     * @param {string} filter
     * @param {number} qos
     */
    add(filter, qos){
        this.topicFilters.push({filter : filter, qos : qos});
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        if(this.topicFilters.length === 0) throw ErrMsg(EC.ENCODE_FILTER_LIST_EMPTY);
        // write packet flags
        this.flags = SUB_RESERVED;
        // calculate variable length
        return 2 + this.topicFilters.reduce((sum, item) => sum + 2 + item.filter.length + 1, 0);
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        // variable header
        encoder.writeUInt16(this.packetID);
        // payload
        for (const item of this.topicFilters) {
            encoder.writeString(item.filter);
            encoder.writeUInt8(item.qos);
        }
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // variable header
        this.packetID = decoder.readUInt16();
        // payload
        while(decoder.hasFrameData())
            this.topicFilters.push({filter : decoder.readString(), qos : decoder.readUInt8()});
    }

}

/**
 * @private
 */
class SubscribeAcknowledge extends Packet {

    /**
     *
     */
    constructor() {
        super(SUBACK);

        /**
         * @type {number}
         */
        this.packetID = 0;

        /**
         * @type {!Array<!{failed : boolean, qos : number}>}
         */
        this.qosList = [];
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 2 + this.qosList.length;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        // variable header
        encoder.writeUInt16(this.packetID);
        // payload
        for (const item of this.qosList) {
            if(item.failed)
                encoder.writeUInt8(SUBACK_FAILURE);
            else
                encoder.writeUInt8(item.qos);
        }
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // variable header
        this.packetID = decoder.readUInt16();
        // payload
        this.qosList.length = 0;
        while(decoder.hasFrameData()) {
            switch(decoder.readUInt8()) {
                case SUBACK_AT_MOST_ONCE:
                    this.qosList.push({failed : false, qos : AT_MOST_ONCE});
                    break;
                case SUBACK_AT_LEAST_ONCE:
                    this.qosList.push({failed : false, qos : AT_LEAST_ONCE});
                    break;
                case SUBACK_EXACTLY_ONCE:
                    this.qosList.push({failed : false, qos : EXACTLY_ONCE});
                    break;
                case SUBACK_FAILURE:
                    this.qosList.push({failed : true, qos : AT_MOST_ONCE});
                    break;
                default:
                    throw ErrMsg(EC.ENCODE_INV_SUBSCRIBE_RESULT);
            }
        }
        if(this.qosList.length === 0)
            throw ErrMsg(EC.ENCODE_NO_SUBSCRIBE_RESULT);
    }

}

/**
 * @private
 */
class Unsubscribe extends Packet {

    /**
     *
     */
    constructor() {
        super(UNSUBSCRIBE);

        /**
         * @type {number}
         */
        this.packetID = 0;

        /**
         * @type {!Array<string>}
         */
        this.topicFilters = [];

        /** ------------- runtime support ------------- */

        /**
         * @type {?function()}
         */
        this.onResponse = null;

        /**
         * @type {?function(!Error)}
         */
        this.onFailure = null;

    }

    /**
     * @param {string} filter
     */
    add(filter){
        this.topicFilters.push(filter);
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        if(this.topicFilters.length === 0)
            throw ErrMsg(EC.ENCODE_FILTER_LIST_EMPTY);
        // write packet flags
        this.flags = UNSUB_RESERVED;
        // calculate variable length
        return 2 + this.topicFilters.reduce((sum, filter) => sum + 2 + filter.length, 0);
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        // variable header
        encoder.writeUInt16(this.packetID);
        // payload
        for (const filter of this.topicFilters)
            encoder.writeString(filter);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        // variable header
        this.packetID = decoder.readUInt16();
        // payload
        while(decoder.hasFrameData())
            this.topicFilters.push(decoder.readString());
    }

}

/**
 * @private
 */
class UnsubscribeAcknowledge extends Packet {

    /**
     *
     */
    constructor() {
        super(UNSUBACK);

        /**
         * @type {number}
         */
        this.packetID = 0;
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 2;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
        encoder.writeUInt16(this.packetID);
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
        this.packetID = decoder.readUInt16();
    }

}

/**
 * @private
 */
class PingRequest extends Packet {

    /**
     *
     */
    constructor() {
        super(PINGREQ);
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 0;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

}

/**
 * @private
 */
class PingResponse extends Packet {

    /**
     *
     */
    constructor() {
        super(PINGRESP);
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 0;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

}

/**
 * @private
 */
class Disconnect extends Packet {

    /**
     *
     */
    constructor() {
        super(DISCONNECT);
    }

    /**
     * @return {number}
     * @override
     */
    serializing() {
        return 0;
    }

    /**
     * @param {!Encoder} encoder
     * @override
     */
    serialize(encoder) {
    }

    /**
     * @param {!Decoder} decoder
     * @override
     */
    deserialize(decoder) {
    }

}

function buildPacket(type) {
    switch(type) {
        case PUBACK:
            return new PublishAcknowledge();
        case PUBREC:
            return new PublishReceived();
        case PUBCOMP:
            return new PublishComplete();
        case PUBLISH:
            return new Publish();
        case PUBREL:
            return new PublishRelease();
        case SUBSCRIBE:
            return new Subscribe();
        case SUBACK:
            return new SubscribeAcknowledge();
        case UNSUBSCRIBE:
            return new Unsubscribe();
        case UNSUBACK:
            return new UnsubscribeAcknowledge();
        case PINGREQ:
            return new PingRequest();
        case PINGRESP:
            return new PingResponse();
        case CONNECT:
            return new Connect();
        case CONNACK:
            return new ConnectAcknowledge();
        case DISCONNECT:
            return new Disconnect();
        default:
            throw ErrMsg(EC.DECODE_INV_PACKET_TYPE, type);
    }
}

module.exports = {
    Connect,
    ConnectAcknowledge,
    Publish,
    PublishAcknowledge,
    PublishReceived,
    PublishRelease,
    PublishComplete,
    Subscribe,
    SubscribeAcknowledge,
    Unsubscribe,
    UnsubscribeAcknowledge,
    PingRequest,
    PingResponse,
    Disconnect,
    buildPacket
};

