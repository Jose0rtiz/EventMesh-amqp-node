'use strict';

const MSG = require('../');
const Statistics = require('./util/statistics').ProduceStatistics;

const options     = process.argv.length > 2 ? require(process.argv[2]) : require('./cfg/mqtt-produce-at-most-once');
const measurement = { velocity : 0, uom : 'km/h' };
const maxCount = 100000;
const statistics  = new Statistics(maxCount);

const client = new MSG.Client(options);
const stream = client.ostream('MyOutA');

function send() {
    statistics.onSend();

    let noPause = true;
    while (noPause && statistics.countMessage()) {
        measurement.velocity = Math.random() * 100;
        noPause = stream.write({payload : Buffer.from(JSON.stringify(measurement)), done : statistics.onDone});
    }

    if (noPause) {
        statistics.onStop();
    } else {
        statistics.onWait();
        console.log('wait');
    }
}

statistics
    .on('done', () => {
        console.log('done');
        client.disconnect();
    });

stream
    .on('ready', () => {
        console.log('ready');
        send();
    })
    .on('drain', () => {
        console.log('continue');
        send();
    })
    .on('error', (error) => {
        console.log(error);
    });

client
    .on('connected', () => {
        console.log('connected');
    })
    .on('error', (err) => {
        console.log(err);
    })
    .on('disconnected', () => {
        console.log('disconnected');
        statistics.print();
    });

client.connect();
