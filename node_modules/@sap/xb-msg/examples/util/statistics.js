'use strict';

const EventEmitter = require('events');

/**
 * @private
 */
class ProduceStatistics extends EventEmitter {

    constructor(maxCount) {

        super();

        this._countTodo = maxCount;
        this._countSent = 0;
        this._countDone = 0;
        this._countPause = 0;
        this._durationInit = 0;
        this._durationWork = 0;
        this._durationWait = 0;
        this._timeBase = Date.now();

        this.onDone = () => {
            if (++this._countDone === this._countTodo) {
                this.emit('done');
            }
        };

    }

    countMessage() {
        if(this._countSent < this._countTodo) {
            ++this._countSent;
            return true;
        }
        return false;
    }

    onSend() {
        if (this._durationInit) {
            this._durationWait += this._duration();
        } else {
            this._durationInit += this._duration();
        }
    }

    onWait() {
        ++this._countPause;
        this._durationWork += this._duration();
    }

    onStop() {
        this._durationWork += this._duration();
        if (this._countDone === 0) {    // no acknowledges at all
            this.emit('done');
        }
    }

    _duration() {
        const now = Date.now();
        const duration = now - this._timeBase;
        this._timeBase = now;
        return duration;
    }

    print() {
        this._durationWait += this._duration();
        const overallTime = (this._durationWait + this._durationWork);
        console.log('socket wait time[ms]  : ' + this._durationWait);
        console.log('socket init time[ms]  : ' + this._durationInit);
        console.log('sender work time[ms]  : ' + this._durationWork);
        console.log('overall run time[ms]  : ' + overallTime);
        if(overallTime > 10) {
            console.log('overall rate [msg/s]  : ' + Math.trunc(this._countSent * 1000 / overallTime));
        }
    }

}

/**
 * @private
 */
class ConsumeStatistics {

    constructor(maxCount, logCount) {

        this.COUNT       = 1;
        this.COUNT_LOG   = 2;
        this.UNSUBSCRIBE = 3;
        this.COOLDOWN    = 4;

        this._countTodo = maxCount;
        this._countDone = 0;
        this._countLog = logCount;
        this._timeStart = 0;
        this._timeFinish = 0;

    }

    onReceive() {
        if (this._countDone === 0) {
            this._timeStart = Date.now();
        }

        ++this._countDone;

        if (this._countDone < this._countTodo) {
            return this._countDone % this._countLog === 0 ? this.COUNT_LOG : this.COUNT;
        } else if (this._countDone === this._countTodo) {
            this._timeFinish = Date.now();
            return this.UNSUBSCRIBE;
        } else {
            --this._countDone;
            return this.COOLDOWN;
        }
    }

    count() {
        return this._countDone;
    }

    print() {
        const overallTime = this._timeFinish - this._timeStart;
        console.log();
        console.log('messages received     : ' + this._countDone);
        console.log('overall run time[ms]  : ' + (overallTime));
        if(overallTime > 10) {
            console.log('overall rate [msg/s]  : ' + Math.trunc(this._countDone * 1000 / overallTime));
        }
    }

}

module.exports.ProduceStatistics = ProduceStatistics;
module.exports.ConsumeStatistics = ConsumeStatistics;

