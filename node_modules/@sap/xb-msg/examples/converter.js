'use strict';

const Transform = require('stream').Transform;

const MSG = require('../');
const Statistics = require('./util/statistics').ConsumeStatistics;

const options = process.argv.length > 2 ? require(process.argv[2]) : require('./cfg/stream-convert-amqp-no-ack');
const maxCount = 100000; const logCount = 1000;
const statistics = new Statistics(maxCount, logCount);

class Converter extends Transform {
    constructor() {
        super({
            highWaterMark: 500,
            decodeString: false,
            allowHalfOpen: false,
            readableObjectMode: true,
            writableObjectMode: true,

            transform(message, encoding, callback) {
                try {
                    const data = JSON.parse(message.payload.toString());
                    data.velocity /= 1.60934; data.uom = 'm/h';
                    const result = { payload : Buffer.from(JSON.stringify(data)) };
                    callback(null, result);
                } catch (e) {
                    callback(e, message);
                }
            }
        });
    }
}

const client = new MSG.Client(options);
client.istream('MyInpA').pipe(new Converter()).pipe(client.ostream('MyOutA'));

client.istream('MyInpA')
    .on('subscribed', () => {
        console.log('subscribed');
    })
    .on('data', (message) => {
        switch (statistics.onReceive()) {
            case statistics.COUNT:
                message.done();
                return;
            case statistics.COUNT_LOG:
                console.log(statistics.count());
                message.done();
                return;
            case statistics.UNSUBSCRIBE:
                console.log(statistics.count());
                message.done();
                client.disconnect();
                return;
            case statistics.COOLDOWN:
                message.done();
                return;
        }
    });

client
    .on('connected', () => {
        console.log('connected');
    })
    .on('error', (err) => {
        console.log(err);
    })
    .on('disconnected', () => {
        console.log('disconnected');
        statistics.print();
    });

client.connect();

